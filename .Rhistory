output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
#install.packages("httr")
library("httr")
library(dplyr)
library(jsonlite)
zip.code <- '98105'
base.url <- "https://congress.api.sunlightfoundation.com/"
```
```{r reporting district, echo= FALSE}
query.params <- list(zip = zip.code)
district.response <- GET(paste0(base.url, "districts/locate/"), query = query.params)
district.body <- content(district.response, "text")
district.data <- fromJSON(district.body)
district.df <- as.data.frame(district.data)
district.num <- district.df$results.district
district.state <- district.df$results.state
```
In `r district.state` State, zip code = `r zip.code`, there are `r district.num` congressional districts.
```{r representatives table, echo= FALSE}
representatives.response <- GET(paste0(base.url, "legislators/locate/"), query = query.params)
representatives.body <- content(representatives.response, "text")
representatives.data <- fromJSON(representatives.body)
representatives.df <- as.data.frame(representatives.data)
representatives.df <- flatten(representatives.df)
representatives.relevant <- select(representatives.df, results.first_name, results.last_name, contains("title"), contains("party"), contains("chamber"), contains("phone"))
names <- c("First Name", "Last Name", "Title", "Party", "Chamber", "Phone", "Website", "Twitter")
websites <- representatives.df$results.website
markdown.websites <- paste0("[link](", websites, ")")
representatives.relevant$results.website <- markdown.websites
twitter <- representatives.df$results.twitter_id
markdown.twitter <- paste0("[link](https://www.twitter.com/", twitter, "/)")
representatives.relevant$results.twitter <- markdown.twitter
knitr::kable(representatives.relevant, format = "markdown", col.names = names)
```
```{r summary committee information, echo= FALSE}
Committee <- function(rep.id) {
comm.query.params <- list(member_ids = rep.id)
comm.response <- GET(paste0(base.url, "committees/"), query = comm.query.params)
comm.body <- content(comm.response, "text")
comm.data <- fromJSON(comm.body)
comm.df <- as.data.frame(comm.data) %>% flatten()
return(comm.df)
}
list.id <- list(representatives.df[1, "results.bioguide_id"], representatives.df[2, "results.bioguide_id"], representatives.df[3, "results.bioguide_id"])
committee.info <- lapply(list.id, Committee)
jayapal.committee.info <- data.frame(committee.info[1])
murray.committee.info <- data.frame(committee.info[2])
cantwell.committee.info <- data.frame(committee.info[3])
representatives.relevant$No.of.Committees <- c(nrow(jayapal.committee.info), nrow(murray.committee.info), nrow(cantwell.committee.info))
par(mai = c(1, 2, 1, 1))
barplot(main = "Committees Served by Each Rep", height = representatives.relevant$No.of.Committees, horiz = TRUE, xlab = "# Committees", names.arg = paste(representatives.relevant$results.first_name, representatives.relevant$results.last_name), las = 1)
```
```{r in-depth committee information, echo= FALSE}
#In this section, you'll (again) use the /committees API endpoint to access more in-depth information about a particular committee that one of your representatives serves on. To do so, follow these steps
#Using your committee information from above, programmatically select one committee from your data that is not a subcommittee. Be sure to track which representative is on that committee.
#Using your selected committee's id, you'll want to query all members of that committee (i.e, fields="members"). Make sure to return all results (not just the first page)
#The information returned from this query is (unfortunately) is a pretty messy format. I found the following to be a great way to access the information I wanted (where res is the result returned from the API):
#body <- fromJSON(content(res,"text"))$results$members[[1]] %>% flatten()
```
View(jayapal.committee.info)
committee.id <- select(jayapal.committee.info, committee.id, results.subcommittee) %>% filter(results.subcommittee == FALSE)
committee.id <- select(jayapal.committee.info, results.committee_id, results.subcommittee) %>% filter(results.subcommittee == FALSE)
View(committee.id)
committee.id <- committee.id[1, "results.committee_id"]
committee.id <- select(jayapal.committee.info, results.committee_id, results.subcommittee) %>% filter(results.subcommittee == FALSE)%>% committee.id[1, "results.committee_id"]
rep.name <- "jayapal"
committee.id <- select(jayapal.committee.info, results.committee_id, results.subcommittee) %>% filter(results.subcommittee == FALSE)
committee.id <- committee.id[1, "results.committee_id"]
in.depth.query.params <- list(fields = "members")
in.depth.response <- GET(paste0(base.url, "committees"), query = in.depth.query.params)
in.depth.body <- fromJSON(content(in.depth.response,"text"))$results$members[[1]] %>% flatten()
in.depth.df <- as.data.frame(in.depth.body)
View(in.depth.df)
View(in.depth.body)
View(in.depth.body)
chairman <- select(in.depth.body, contains("name"), contains("title"))
View(district.df)
View(chairman)
chairman <- select(in.depth.body,results.last_name, results.first_name, contains("title"))
chairman <- select(in.depth.body,legislator.last_name, legislator.first_name, contains("title"))
chairman <- select(in.depth.body,legislator.last_name, legislator.first_name, contains("title")) %>% filter(legislator.title == 'Chairman')
chairman <- select(in.depth.body,legislator.last_name, legislator.first_name, contains("title"))
chairman <- select(in.depth.body,legislator.last_name, legislator.first_name, title) %>% filter(title == "Chairman")
chairman.name <- paste(chairman$legislator.first_name, chairman$legislator.last_name)
num.people <- nrows(in.depth.body)
num.people <- summarize(nrows(in.depth.body))
num.people <- summarize(n(in.depth.body))
num.people <- n(in.depth.body)
num.people <- summarise(n(in.depth.body))
num.people <- in.depth.body %>% summarise(n())
View(num.people)
number.in.committee <- num.people$`n()`
legislators <- do.call(rbind, lapply(committee.info, data.frame, stringsAsFactors = FALSE))
legislators <- do.call(cbind, lapply(committee.info, data.frame, stringsAsFactors = FALSE))
legislators <- do.call(rbind, cbind, lapply(committee.info, data.frame, stringsAsFactors = FALSE))
legislators <- do.call(cbind, lapply(committee.info, data.frame, stringsAsFactors = FALSE))
knitr::kable(representatives.relevant, format = "markdown", col.names = names)
rep.name <- "cantwell"
committee.id <- select(cantwell.committee.info, results.committee_id, results.subcommittee) %>% filter(results.subcommittee == FALSE)
committee.id <- committee.id[1, "results.committee_id"]
in.depth.query.params <- list(fields = "members")
in.depth.response <- GET(paste0(base.url, "committees"), query = in.depth.query.params)
in.depth.body <- fromJSON(content(in.depth.response,"text"))$results$members[[1]] %>% flatten()
#Who is the chair of the committee (first and last name)?
chairman <- select(in.depth.body,legislator.last_name, legislator.first_name, title) %>% filter(title == "Chairman")
chairman.name <- paste(chairman$legislator.first_name, chairman$legislator.last_name)
#How many people are on the committee?
num.people <- in.depth.body %>% summarise(n())
number.in.committee <- num.people$`n()`
View(in.depth.body)
rep.name <- "cantwell"
committee.id <- select(cantwell.committee.info, results.committee_id, results.subcommittee) %>% filter(results.subcommittee == FALSE)
committee.id <- committee.id[2, "results.committee_id"]
in.depth.query.params <- list(fields = "members")
in.depth.response <- GET(paste0(base.url, "committees"), query = in.depth.query.params)
in.depth.body <- fromJSON(content(in.depth.response,"text"))$results$members[[1]] %>% flatten()
#Who is the chair of the committee (first and last name)?
chairman <- select(in.depth.body,legislator.last_name, legislator.first_name, title) %>% filter(title == "Chairman")
chairman.name <- paste(chairman$legislator.first_name, chairman$legislator.last_name)
#How many people are on the committee?
num.people <- in.depth.body %>% summarise(n())
number.in.committee <- num.people$`n()`
View(in.depth.body)
library(cars)
library(emptycars)
emptycars
library(plotly)
install.packages(plotly)
library(plotly)
install.packages(plot_ly)
library(plotly)
library("plotly")
mtcars
install.packages("plotly")
library("plotly")
plot_ly(data = mtcars, x = ~mpg, y = wt)
plot_ly(data = mtcars, x = ~mpg, y = ~wt)
library("plotly")
library(dplyr)
library("httr")
library(dplyr)
library(jsonlite)
setwd("~/Desktop/INFO201/a6-mapping-shootings-meghagoel97")
shooting.data <- read.csv('~/Desktop/INFO201/a6-mapping-shootings/data/any_drinking.csv', stringsAsFactors = FALSE)
shooting.data <- read.csv('~/Desktop/INFO201/a6-mapping-shootings-meghagoel97/data/any_drinking.csv', stringsAsFactors = FALSE)
shooting.data <- read.csv('~/Desktop/INFO201/a6-mapping-shootings-meghagoel97/data/shootings-2016.csv', stringsAsFactors = FALSE)
View(shooting.data)
View(shooting.data)
total.shootings <- nrow(shooting.data)
total.lives.lost <- total.shootings %>% select(killed) %>% sum()
total.lives.lost <- total.shootings %>% select(killed) %>% cumsum()
total.lives.lost <- total.shootings %>% select('killed') %>% cumsum()
total.lives.lost <- shooting.data %>% select('killed') %>% cumsum()
total.lives.lost <- shooting.data %>% select(killed) %>% cumsum()
View(total.lives.lost)
total.lives.lost <- shooting.data %>% select(killed) %>% summarise(sum())
View(total.lives.lost)
total.lives.lost <- shooting.data %>% select(killed) %>% summarise(cumsum())
total.lives.lost <- shooting.data %>% select(killed) %>% cumsum()
View(total.lives.lost)
total.lives.lost <- sum(shooting.data$killed)
total.lives.injured <-sum(shooting.data$injured)
num.unique.states.affected <- filter(shooting.data, unique(state))
num.unique.states.affected <- filter(shooting.data, state)
num.unique.states.affected <- select(shooting.data, state)
View(shooting.data)
View(num.unique.states.affected)
num.unique.states.affected <- select(shooting.data, state) %>% filter(unique(state))
num.unique.states.affected <- select(shooting.data, state) %>% filter(state == unique(state))
num.unique.states.affected <- select(shooting.data, unique(state)
View(num.unique.states.affected)
View(num.unique.states.affected)
View(shooting.data)
num.unique.states.affected <- select(shooting.data, unique(state))
View(num.unique.states.affected)
num.unique.states.affected <- unique(shooting.data$state)
num.unique.states.affected <- unique(shooting.data$state) %>% as.data.frame()
View(num.unique.states.affected)
unique.states.affected <- unique(shooting.data$state) %>% as.data.frame()
num.unique.states.affected <- nrow(unique.states.affected)
most.affected <- filter(shooting.data, killed > 5 | injured > 5)
most.affected <- filter(shooting.data, killed >= 5 | injured >= 5)
View(most.affected)
most.affected.killed <- filter(shooting.data, killed >= 5)
most.affected.injured <- filter(shooting.data, injured >= 5)
max.killed <- filter(most.affected.killed, killed == max(killed))
max.injured <- filter(most.affected.injured, injured == max(injured))
View(max.injured)
View(max.killed)
date.most.shootings <- mutate(shooting.data, total.affected = injured + killed)
most.shootings <- mutate(shooting.data, total.affected = injured + killed)
shooting.d <- mutate(shooting.data, total.affected = injured + killed)
View(shooting.d)
num.total.affected <- sum(shooting.data$total.affected)
shooting.d <- mutate(shooting.data, total.affected = injured + killed)
num.total.affected <- sum(shooting.data$total.affected)
num.total.affected <- sum(shooting.d$total.affected)
num.total.affected <- sum(shooting.d$total.affected)
shooting.data <- mutate(shooting.data, total.affected = injured + killed)
setwd("~/Desktop/INFO201/a6-mapping-shootings-meghagoel97")
shooting.data <- read.csv('~/Desktop/INFO201/a6-mapping-shootings-meghagoel97/data/shootings-2016.csv', stringsAsFactors = FALSE)
total.shootings <- nrow(shooting.data)
total.lives.lost <- sum(shooting.data$killed)
total.lives.injured <-sum(shooting.data$injured)
unique.states.affected <- unique(shooting.data$state) %>% as.data.frame()
num.unique.states.affected <- nrow(unique.states.affected)
most.affected.killed <- filter(shooting.data, killed >= 5)
most.affected.injured <- filter(shooting.data, injured >= 5)
max.killed <- filter(most.affected.killed, killed == max(killed))
max.injured <- filter(most.affected.injured, injured == max(injured))
max.city.name <- max.injured$city
max.state.name <- max.injured$state
shooting.data <- mutate(shooting.data, total.affected = injured + killed)
num.total.affected <- sum(shooting.data$total.affected)
shooting.date.relevant <- select(shooting.data, date, total.affected) %>% filter(date, total.affected = sum(total.affected))
shooting.date.relevant <- select(shooting.data, date, total.affected) %>% filter(date, total.affected == sum(total.affected))
shooting.date.relevant <- select(shooting.data, date, total.affected) %>% filter(date, summarise(total.affected))
shooting.date.relevant <- select(shooting.data, date, total.affected) %>% filter(date, summarise(cumsum(total.affected)))
shooting.date.relevant <- select(shooting.data, date, total.affected) %>% filter(date, summarise(cumall(total.affected)))
shooting.date.relevant <- select(shooting.data, date, total.affected) %>% filter(date)
shooting.date.relevant <- select(shooting.data, date, total.affected) %>% filter(unique(date))
shooting.date.relevant <- select(shooting.data, date, total.affected
shooting.date.relevant <- select(shooting.data, date, total.affected)
data.set <- read.csv('~/Desktop/INFO201/a7-collaboration-aa3/data/intro-survey.csv', stringsAsFactors = FALSE)
data.set <- read.csv('~/Desktop/INFO201/a7-collaboration-aa3/data/intro-survey.csv', stringsAsFactors = FALSE)
library(dplyr)
library(ggplot2)
View(data.set)
relevant <- select(data.set, contains("countries"), contains("siblings"), contains("Seahawks"))
View(relevant)
relevant <- select(data.set, contains("countries"), contains("siblings"), contains("standing"))
View(relevant)
chart.3 <- ggplot(data = relevant) +
geom_polygon(aes(x = contains("countries"), y = contains("siblings"), group = contains("standing"))) +
scale_fill_manual(values = c("blue", "red")) +
coord_quickmap()
ggplot(data = relevant) +
geom_polygon(aes(x = contains("countries"), y = contains("siblings"), group = contains("standing"))) +
scale_fill_manual(values = c("blue", "red")) +
coord_quickmap()
relevant <- select(data.set, countries = contains("countries"), siblings = contains("siblings"), standing = contains("standing"))
View(relevant)
ggplot(data = relevant) +
geom_polygon(aes(x = countries, y = siblings, group = standing)) +
scale_fill_manual(values = c("blue", "red")) +
coord_quickmap()
ggplot(data = relevant) +
geom_polygon(aes(x = countries, y = siblings, group = group)) +
scale_fill_manual(values = c("blue", "red")) +
coord_quickmap()
ggplot(data = relevant) +
geom_violin(mapping = aes(x = countries, y = siblings)) +
scale_fill_manual(values = c("blue", "red")) +
coord_quickmap()
ggplot(data = relevant) +
geom_violin(mapping = aes(x = countries, y = siblings)) +
scale_y_log10()
ggplot(data = relevant) +
geom_violin(mapping = aes(x = countries, y = siblings)) +
scale_y_log5()
ggplot(data = relevant) +
geom_violin(mapping = aes(x = countries, y = siblings)) +
scale_fill_manual( values = standings)
ggplot(data = relevant) +
geom_violin(mapping = aes(x = countries, y = siblings)) +
scale_fill_manual( values = "royalblue")
ggplot(data = relevant) +
geom_dotplot(mapping = aes(x = countries, y = siblings)) +
scale_fill_manual( values = "royalblue")
ggplot(data = relevant) +
geom_dotplot(mapping = aes(x = countries, y = siblings)) +
scale_fill_manual( values = c("royalblue"))
ggplot(data = relevant) +
geom_dotplot(mapping = aes(x = countries, y = siblings)) +
scale_fill_brewer(palette = "Blues")
ggplot(data = relevant) +
geom_violin(mapping = aes(x = countries, y = siblings))
ggplot(data = relevant) +
geom_violin(mapping = aes(x = countries, y = siblings)) +
stat_summary(fun.y = mean, geom = "point", size = 2, color = "red")
ggplot(data = relevant) +
geom_violin(mapping = aes(x = countries, y = siblings)) +
coord_flip() +
stat_summary(fun.y = mean, geom = "point", size = 2, color = "red")
ggplot(data = relevant) +
geom_violin(mapping = aes(x = countries, y = siblings)) +
stat_summary(fun.y = mean, geom = "point", size = 2, color = "red")
ggplot(data = relevant) +
geom_violin(mapping = aes(x = countries, y = siblings))
ggplot(data = relevant) +
geom_violin(mapping = aes(x = countries, y = siblings)) +
stat_summary(fun.y = median(siblings), geom = "point", size = 2, color = "red")
ggplot(data = relevant) +
geom_violin(mapping = aes(x = countries, y = siblings)) +
stat_summary(fun.y = median("siblings"), geom = "point", size = 2, color = "red")
ggplot(data = relevant) +
geom_violin(mapping = aes(x = countries, y = siblings)) +
stat_summary(fun.y = median, geom = "point", size = 2, color = "red")
DataSummary <- function(x) {
m <- mean(x)
ymin <- m-sd(x)
ymax <- m+sd(x)
return(c(y=m,ymin=ymin,ymax=ymax))
}
ggplot(data = relevant) +
geom_violin(mapping = aes(x = countries, y = siblings)) +
stat_summary(fun.data = DataSummary)
ggplot(data = relevant, aes(x = countries, y = siblings)) +
geom_violin() +
stat_summary(fun.data = DataSummary)
ggplot(data = relevant, aes(x = countries, y = siblings)) +
geom_violin() +
coord_flip() +
stat_summary(fun.data = DataSummary)
ggplot(data = relevant, aes(x = countries, y = siblings)) +
geom_violin() +
geom_dotplot(binaxis = 'y', stackdir = 'center', dotsize = 1)
ggplot(data = relevant, aes(x = countries, y = siblings)) +
geom_violin() +
geom_dotplot(binaxis = 'x', stackdir = 'center', dotsize = 1)
ggplot(data = relevant, aes(x = countries, y = siblings)) +
geom_violin() +
geom_jitter(shape=16, position=position_jitter(0.2))
ggplot(data = relevant, aes(x = countries, y = siblings)) +
geom_violin() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
scale_color_brewer(palette = "Blues")
ggplot(data = relevant, aes(x = countries, y = siblings, color = countries)) +
geom_violin() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
scale_color_brewer(palette = "Blues")
ggplot(data = relevant, aes(x = countries, y = siblings, color = countries)) +
geom_violin() +
geom_jitter(shape=16, position=position_jitter(0.2))
ggplot(data = relevant, aes(x = countries, y = siblings, color = countries)) +
geom_violin(trim = FALSE) +
geom_jitter(shape=16, position=position_jitter(0.2))
ggplot(data = relevant, aes(x = countries, y = siblings, color = countries)) +
geom_violin(trim = FALSE) +
geom_jitter(shape=16, position=position_jitter(0.2)) +
scale_color_brewer(palette = "Blues")
ggplot(data = relevant, aes(x = countries, y = siblings, color = countries)) +
geom_violin(trim = FALSE) +
geom_jitter(shape=16, position=position_jitter(0.2))
relevant <- select(data.set, countries = contains("countries"), siblings = contains("siblings"), standing = contains("standing")) %>% group_by(siblings)
ggplot(data = relevant, aes(x = countries, y = siblings, color = countries)) +
geom_violin(trim = FALSE) +
geom_jitter(shape=16, position=position_jitter(0.2))
ggplot(data = relevant, aes(x = siblings, y = countries, color = countries)) +
geom_violin(trim = FALSE) +
geom_jitter(shape=16, position=position_jitter(0.2))
ggplot(data = relevant, aes(x = countries, y = siblings, color = countries)) +
geom_violin(trim = FALSE) +
geom_jitter(shape=16, position=position_jitter(0.2))
ggplot(data = relevant, aes(x = countries, y = siblings, color = standings)) +
geom_violin(trim = FALSE) +
geom_jitter(shape=16, position=position_jitter(0.2))
ggplot(data = relevant, aes(x = countries, y = siblings, color = standing)) +
geom_violin(trim = FALSE) +
geom_jitter(shape=16, position=position_jitter(0.2))
ggplot(data = relevant, aes(x = countries, y = siblings, color = standing)) +
geom_violin(trim = FALSE) +
coord_flip()
ggplot(data = relevant, aes(x = countries, y = siblings, color = standing)) +
geom_violin(trim = FALSE)
ggplot(data = relevant, aes(x = countries, y = siblings, color = standing)) +
geom_violin(trim = FALSE) +
scale_x_log10()
ggplot(data = relevant, aes(x = countries, y = siblings, color = standing)) +
geom_violin(trim = FALSE)
ggplot(data = relevant, aes(x = countries, y = siblings, color = standing)) +
geom_violin()
ggplot(data = relevant, aes(x = countries, y = siblings, color = standing)) +
geom_violin() + scale_x_log10()
ggplot(data = relevant, aes(x = countries, y = siblings, color = standing)) +
geom_violin()
ggplot(data = relevant, aes(x = countries, y = siblings, color = standing)) +
geom_violin() +
geom_dotplot(binaxis='y', stackdir='center',
position=position_dodge(1))
ggplot(data = relevant, aes(x = countries, y = siblings, color = standing)) +
geom_violin() +  geom_boxplot(width=0.1, fill="white")+
ggplot(data = relevant, aes(x = countries, y = siblings, color = standing)) +
geom_violin() +  geom_boxplot(width=0.1, fill="white")
ggplot(data = relevant, aes(x = countries, y = siblings, color = standing)) +
geom_violin()
ggplot(data = relevant, aes(x = countries, y = standing, color = sibling)) +
geom_violin()
ggplot(data = relevant, aes(x = countries, y = standing, color = siblings)) +
geom_violin()
ggplot(data = relevant, aes(x = countries, y = siblings, color = standing)) +
geom_violin(trim = FALSE) +
labs(title = "Plot of countries travelled by the number of siblings, divided by Standing")
ggplot(data = relevant, aes(x = countries, y = siblings, color = standing)) +
geom_violin(scale = "area", trim = FALSE) +
labs(title = "Plot of countries travelled by the number of siblings, divided by Standing")
ggplot(data = relevant, aes(x = countries, y = siblings, color = standing)) +
geom_violin(scale = standing, trim = FALSE) +
labs(title = "Plot of countries travelled by the number of siblings, divided by Standing")
ggplot(data = relevant, aes(x = countries, y = siblings, color = standing)) +
geom_violin(scale = "area", trim = FALSE) +
labs(title = "Plot of countries travelled by the number of siblings, divided by Standing")
ggplot(data = relevant, aes(x = countries, y = siblings, color = standing)) +
geom_violin(scale = "area", size = standing, trim = FALSE) +
labs(title = "Plot of countries travelled by the number of siblings, divided by Standing")
ggplot(data = relevant, aes(x = countries, y = siblings, color = standing)) +
geom_violin(scale = "area", size = 2, trim = FALSE) +
labs(title = "Plot of countries travelled by the number of siblings, divided by Standing")
ggplot(data = relevant, aes(x = countries, y = siblings, color = standing)) +
geom_violin(scale = "area", weight = 1, trim = FALSE) +
labs(title = "Plot of countries travelled by the number of siblings, divided by Standing")
ggplot(data = relevant, aes(x = countries, y = siblings)) +
geom_violin(scale = "area", trim = FALSE, alpha = standing) +
labs(title = "Plot of countries travelled by the number of siblings, divided by Standing", )
ggplot(data = relevant, aes(x = countries, y = siblings)) +
geom_violin(scale = "area", trim = FALSE) +
labs(title = "Plot of countries travelled by the number of siblings", x = "No. of Countries")
ggplot(data = relevant, aes(x = countries, y = siblings, fill = "#999999")) +
geom_violin(scale = "area", trim = FALSE) +
labs(title = "Plot of countries travelled by the number of siblings", x = "No. of Countries")
ggplot(data = relevant, aes(x = countries, y = siblings, color = "#999999")) +
geom_violin(scale = "area", trim = FALSE) +
labs(title = "Plot of countries travelled by the number of siblings", x = "No. of Countries")
ggplot(data = relevant, aes(x = countries, y = siblings)) +
geom_violin(scale = "area", trim = FALSE) +
labs(title = "Plot of countries travelled by the number of siblings", x = "No. of Countries") +
p + scale_color_grey() + theme_classic()
ggplot(data = relevant, aes(x = countries, y = siblings)) +
geom_violin(scale = "area", trim = FALSE) +
labs(title = "Plot of countries travelled by the number of siblings", x = "No. of Countries") +
scale_color_grey() + theme_classic()
ggplot(data = relevant, aes(x = countries, y = siblings, fill = '#999999')) +
geom_violin(scale = "area", trim = FALSE) +
labs(title = "Plot of countries travelled by the number of siblings", x = "No. of Countries") +
scale_color_grey() + theme_classic()
ggplot(data = relevant, aes(x = countries, y = siblings, fill = darkblue)) +
geom_violin(scale = "area", trim = FALSE) +
labs(title = "Plot of countries travelled by the number of siblings", x = "No. of Countries") +
scale_color_grey() + theme_classic()
ggplot(data = relevant, aes(x = countries, y = siblings, fill = "darkblue")) +
geom_violin(scale = "area", trim = FALSE) +
labs(title = "Plot of countries travelled by the number of siblings", x = "No. of Countries") +
scale_color_grey() + theme_classic()
ggplot(data = relevant, aes(x = countries, y = siblings)) +
geom_violin(scale = "area", trim = FALSE) +
labs(title = "Plot of countries travelled by the number of siblings", x = "No. of Countries") +
scale_color_grey() + scale_fill_grey() + theme_classic()
ggplot(data = relevant, aes(x = countries, y = siblings, fill = '#A4A4A4')) +
geom_violin(scale = "area", trim = FALSE) +
labs(title = "Plot of countries travelled by the number of siblings", x = "No. of Countries") +
scale_color_grey() + theme_classic()
ggplot(data = relevant, aes(x = countries, y = siblings)) +
geom_violin(scale = "area", trim = FALSE, , fill = '#A4A4A4') +
labs(title = "Plot of countries travelled by the number of siblings", x = "No. of Countries") +
scale_color_grey() + theme_classic()
ggplot(data = relevant, aes(x = countries, y = siblings)) +
geom_violin(scale = "area", trim = FALSE, , fill = "darkblue") +
labs(title = "Plot of countries travelled by the number of siblings", x = "No. of Countries") +
scale_color_grey() + theme_classic()
ggplot(data = relevant, aes(x = countries, y = siblings)) +
geom_violin(scale = "area", trim = FALSE, , fill = "blue") +
labs(title = "Plot of countries travelled by the number of siblings", x = "No. of Countries") +
scale_color_grey() + theme_classic()
ggplot(data = relevant, aes(x = countries, y = siblings)) +
geom_violin(scale = "area", trim = FALSE, , fill = "deepskyblue") +
labs(title = "Plot of countries travelled by the number of siblings", x = "No. of Countries") +
scale_color_grey() + theme_classic()
ggplot(data = relevant, aes(x = countries, y = siblings)) +
geom_violin(scale = "area", trim = FALSE, fill = "gray") +
labs(title = "Plot of countries travelled by the number of siblings", x = "No. of Countries") +
theme_classic()
ggplot(data = relevant, aes(x = countries, y = siblings)) +
geom_violin(scale = "area", trim = FALSE, fill = "deepskyblue", color = "darkblue") +
labs(title = "Plot of countries travelled by the number of siblings", x = "No. of Countries") +
theme_classic()
ggplot(data = relevant, aes(x = countries, y = siblings)) +
geom_violin(scale = "area", trim = FALSE, fill = "deepskyblue", color = "darkblue") +
geom_boxplot(width=0.1, fill="white") +
labs(title = "Plot of countries travelled by the number of siblings", x = "No. of Countries", y = "No. of Siblings") +
theme_classic()
ggplot(data = relevant, aes(x = countries, y = siblings)) +
geom_violin(scale = "area", trim = FALSE, fill = "deepskyblue", color = "darkblue") +
geom_boxplot(width=0.01, fill="white") +
labs(title = "Plot of countries travelled by the number of siblings", x = "No. of Countries", y = "No. of Siblings") +
theme_classic()
ggplot(data = relevant, aes(x = countries, y = siblings)) +
geom_violin(scale = "area", trim = FALSE, fill = "deepskyblue", color = "darkblue") +
geom_boxplot(fill="white") +
labs(title = "Plot of countries travelled by the number of siblings", x = "No. of Countries", y = "No. of Siblings") +
theme_classic()
ggplot(data = relevant, aes(x = countries, y = siblings)) +
geom_violin(scale = "area", trim = FALSE, fill = "deepskyblue", color = "darkblue") +
geom_boxplot(width=0.1) +
labs(title = "Plot of countries travelled by the number of siblings", x = "No. of Countries", y = "No. of Siblings") +
theme_classic()
ggplot(data = relevant, aes(x = countries, y = siblings)) +
geom_violin(scale = "area", trim = FALSE, fill = "deepskyblue", color = "darkblue") +
labs(title = "Plot of countries travelled by the number of siblings", x = "No. of Countries", y = "No. of Siblings") +
theme_classic()
Chart3 <- function(value.set) {
ggplot(data = value.set, aes(x = countries, y = siblings)) +
geom_violin(scale = "area", trim = FALSE, fill = "deepskyblue", color = "darkblue") +
labs(title = "Plot of countries travelled by the number of siblings", x = "No. of Countries", y = "No. of Siblings") +
theme_classic()
}
Chart3(relevant)
setwd("~Desktop/INFO201/a7-collaboration-aa3")
shiny::runApp('Desktop/INFO201/a8-building-apps-meghagoel97')
runApp('Desktop/INFO201/info201-final-project')
ChooseRandCommit()
response.commit.all <- GET(full.uri.commit, query=                                                                                                           "fields=member_ids,name,committee_id,subcommittee&per_page=all")
body.commit.all <- fromJSON(content(response.commit.all, "text"))
df <- body.commit.all$results
ChooseRandCommitID <- function() {
rand <- runif(1, 1, 230)
rand.committee <- body.commit.all$results$committee_id[rand]
if(body.commit.all$results$subcommittee[rand] == TRUE) {
ChooseRandCommit()
} else {
return(rand.committee)
}
}
ChooseRandCommitID()
body.commit.results <- body.commit.all$results
ChooseRandCommitID <- function() {
rand <- runif(1, 1, 230)
rand.committee <- body.commit.results$committee_id[rand]
if(body.commit.results$subcommittee[rand] == TRUE) {
ChooseRandCommit()
} else {
return(rand.committee)
}
}
ChooseRandCommitID()
rand.commit <- ChooseRandCommitID()
ChooseRandCommitID <- function() {
rand <- runif(1, 1, 230)
rand.committee <- body.commit.results$committee_id[rand]
if(body.commit.results$subcommittee[rand] == TRUE) {
ChooseRandCommitID()
} else {
return(rand.committee)
}
}
rand.commit <- ChooseRandCommitID() #Stores a random committee ID in a variable.
query.params.commit <- paste0("committee_id=", rand.commit, "&fields=members,name&per_page=all")
response.commit <- GET(full.uri.commit, query = query.params.commit)
body.commit.ID <- fromJSON(content(response.commit.ID, "text"))
body.commit.ID <- fromJSON(content(response.commit.ID, "text"))
query.params.commit.ID <- paste0("committee_id=", rand.commit, "&fields=members,name&per_page=all")
response.commit.ID <- GET(full.uri.commit, query = query.params.commit)
body.commit.ID <- fromJSON(content(response.commit.ID, "text"))
body.commit.ID.results <- body.commit.ID$results
View(body.commit.ID.results)
body.commit.ID.members <- body.commit.ID$results$members
body.commit.ID <- fromJSON(content(res,"text"))$results$members[[1]] %>% flatten()
body.commit.ID <- fromJSON(content(response.commit.ID,"text"))$results$members[[1]] %>%
flatten()
View(body.commit.ID)
View(body.commit.ID)
committee.chair <- select(body.commit.ID, contains("Chair"))
View(committee.chair)
committee.chair <- filter(body.commit.ID, contains("Chair"))
committee.chair <- filter(body.commit.ID, grepl("Chair", title))
View(committee.chair)
committee.chair <- filter(body.commit.ID, grepl("Chair", title)) %>%
c(legislator.first_name, legislator.last_name)
committee.chair.name <- c(committee.chair$legislator.first_name, committee.chair$legislator.last_name)
committee.chair.name <- paste(committee.chair$legislator.first_name, committee.chair$legislator.last_name)
num.of.members <- count(body.commit.ID)
num.of.members <- as.numeric(count(body.commit.ID))
View(committees.with.names)
response.commit <- GET(full.uri.commit, query = "fields=member_ids,name,committee_id,subcommittee&per_page=all")
body.commit <- content(response.commit, "text")
commit.data <- fromJSON(body.commit)
results <- commit.data$results
View(results)
CommitteesServed <- function(memID) {
committees.served <- filter(results, grepl(memID, member_ids)) %>%
select(name)
results.bioguide_id <- c(memID)
data.framenew <- data.frame(committees.served, results.bioguide_id)
return(data.framenew)
}
repIDs <- select(as.data.frame(body.legis.data), results.bioguide_id, results.first_name, results.last_name)
committees.served.reps <- rbind.fill(lapply(repIDs$results.bioguide_id, CommitteesServed))
committees.with.names <- join(committees.served.reps, repIDs, by = "results.bioguide_id")
count.of.committees <- group_by(committees.with.names, results.bioguide_id, results.first_name,                                                 results.last_name) %>%
count() %>%
arrange(n)
View(Committees.with.names)
View(committees.with.names)
View(results)
CommitteesServed <- function(memID) {
committees.served <- filter(results, grepl(memID, member_ids)) # %>%
#select(name)
results.bioguide_id <- c(memID)
data.framenew <- data.frame(committees.served, results.bioguide_id)
return(data.framenew)
}
repIDs <- select(as.data.frame(body.legis.data), results.bioguide_id, results.first_name, results.last_name)
committees.served.reps <- rbind.fill(lapply(repIDs$results.bioguide_id, CommitteesServed))
committees.with.names <- join(committees.served.reps, repIDs, by = "results.bioguide_id")
count.of.committees <- group_by(committees.with.names, results.bioguide_id, results.first_name,                                                 results.last_name) %>%
count() %>%
arrange(n)
View(committees.with.names)
names <- c(paste(count.of.committees$results.first_name, count.of.committees$results.last_name))
par(mar= c(5,7,4,2))
par(las =2)
barplot(height = count.of.committees$n, names.arg = names, horiz = TRUE, xlab = "# Committees", main = "Committees Served on by Each Rep.")
ad
par(mar= c(5,7,4,2))
barplot(height = count.of.committees$n, names.arg = names, las = 1, horiz = TRUE, xlab = "# Committees", main = "Committees Served on by Each Rep.")
View(committees.with.names)
View(committees.served.reps)
View(committees.with.names)
ChooseRandCommitID <- function() {
rand <- runif(1, 1, 230)
rand.committee <- committees.with.names$committee_id[rand]
if(committees.with.names$committee_ide[rand] == TRUE) {
ChooseRandCommitID()
} else {
return(rand.committee)
}
}
ChooseRandCommit()
ChooseRandCommitID <- function() {
rand <- runif(1, 1, 33)
rand.committee <- committees.with.names$committee_id[rand]
if(committees.with.names$committee_ide[rand] == TRUE) {
ChooseRandCommitID()
} else {
return(rand.committee)
}
}
rand.commit <- ChooseRandCommitID() #Stores a random committee ID in a variable.
ChooseRandCommitID <- function() {
rand <- runif(1, 1, 33)
rand.committee <- committees.with.names$committee_id[rand]
if(committees.with.names$committee_id[rand] == TRUE) {
ChooseRandCommitID()
} else {
return(rand.committee)
}
}
rand.commit <- ChooseRandCommitID() #Stores a random committee ID in a variable.
ChooseRandCommitID()
ChooseRandCommitID <- function() {
rand <- runif(1, 1, 33)
rand.committee <- committees.with.names$committee_id[rand]
if(committees.with.names$committee_id[rand] == TRUE) {
ChooseRandCommitID()
} else {
return(select(committees.with.names, committee_id == rand.committee)
}
ChooseRandCommitID <- function() {
rand <- runif(1, 1, 33)
rand.committee <- committees.with.names$committee_id[rand]
if(committees.with.names$committee_id[rand] == TRUE) {
ChooseRandCommitID()
} else {
return(select(committees.with.names, committee_id == rand.committee))
}
}
ChooseRandCommitID()
ChooseRandCommitID <- function() {
rand <- runif(1, 1, 33)
rand.committee <- committees.with.names$committee_id[rand]
if(committees.with.names$committee_id[rand] == TRUE) {
ChooseRandCommitID()
} else {
return(filter(committees.with.names, committee_id == rand.committee))
}
}
rand.commit <- ChooseRandCommitID() #Stores a random committee ID in a variable.
ChooseRandCommitID()
View(rand.commit)
query.params.commit.ID <- paste0("committee_id=", rand.commit, "&fields=members,name&per_page=all")
response.commit.ID <- GET(full.uri.commit, query = query.params.commit)
body.commit.ID <- fromJSON(content(response.commit.ID,"text"))$results$members[[1]] %>%
flatten()
committee.chair <- filter(body.commit.ID, grepl("Chair", title))
committee.chair.name <- paste(committee.chair$legislator.first_name, committee.chair$legislator.last_name)
query.params.commit.ID <- paste0("committee_id=", rand.commit$committee_id, "&fields=members,name&per_page=all")
response.commit.ID <- GET(full.uri.commit, query = query.params.commit)
body.commit.ID <- fromJSON(content(response.commit.ID,"text"))$results$members[[1]] %>%
flatten()
committee.chair <- filter(body.commit.ID, grepl("Chair", title))
committee.chair.name <- paste(committee.chair$legislator.first_name, committee.chair$legislator.last_name)
response.commit.ID <- GET(full.uri.commit, query = query.params.commit)
body.commit.ID <- fromJSON(content(response.commit.ID,"text"))$results$members[[1]] %>%
flatten()
ChooseRandCommitID <- function() {
rand <- runif(1, 1, 33)
rand.committee <- committees.with.names$committee_id[rand]
if(committees.with.names$committee_id[rand]$subcommittee == TRUE) {
ChooseRandCommitID()
} else {
return(filter(committees.with.names, committee_id == rand.committee))
}
}
rand.commit <- ChooseRandCommitID() #Stores a random committee ID in a variable.
rand.committee <- committees.with.names$committee_id[10]
ChooseRandCommitID <- function() {
rand <- runif(1, 1, 33)
rand.committee <- committees.with.names$committee_id[rand]
if(committees.with.names$subcommittee[rand] == TRUE) {
ChooseRandCommitID()
} else {
return(filter(committees.with.names, committee_id == rand.committee))
}
}
rand.commit <- ChooseRandCommitID() #Stores a random committee ID in a variable.
View(committees.with.names)
query.params.commit.ID <- paste0("committee_id=", rand.commit$committee_id, "&fields=members,name&per_page=all")
rand.commit <- ChooseRandCommitID() #Stores a random committee ID in a variable.
query.params.commit.ID <- paste0("committee_id=", rand.commit$committee_id, "&fields=members,name&per_page=all")
response.commit.ID <- GET(full.uri.commit, query = query.params.commit)
body.commit.ID <- fromJSON(content(response.commit.ID,"text"))$results$members[[1]] %>%
flatten()
View(body.commit.ID)
body.commit.ID <- fromJSON(content(response.commit.ID,"text"))$results
View(body.commit.ID)
response.commit.ID
response.commit.ID <- GET(full.uri.commit, query = query.params.commit)
response.commit.ID <- GET(full.uri.commit, query = query.params.commit)
response.commit.ID
query.params.commit.ID <- paste0("committee_id=", rand.commit$committee_id, "&fields=members,name&per_page=all")
response.commit.ID <- GET(full.uri.commit, query = query.params.commit.ID)
body.commit.ID <- fromJSON(content(response.commit.ID,"text"))$results$members[[1]] %>%
flatten()
committee.chair <- filter(body.commit.ID, grepl("Chair", title))
committee.chair.name <- paste(committee.chair$legislator.first_name, committee.chair$legislator.last_name)
num.of.members <- as.numeric(count(body.commit.ID))
rep.rand.commit <- paste(rand.commit$results.first_name, rand.commit$results.last_name)
side.of.rep <- filter(body.commit.ID, grepl(rand.commit$results.first_name, legislator.first_name)) %>%
filter(grepl(rand.commit$results.last_name, legislator.last_name) %>%
$side
side.of.rep <- filter(body.commit.ID, grepl(rand.commit$results.first_name, legislator.first_name)) %>%
filter(grepl(rand.commit$results.last_name, legislator.last_name) %>%
side.of.rep$side
side.of.rep <- filter(body.commit.ID, grepl(rand.commit$results.first_name, legislator.first_name)) %>%
side.of.rep <- filter(body.commit.ID, grepl(rand.commit$results.first_name, legislator.first_name)) %>%
filter(grepl(rand.commit$results.last_name, legislator.last_name)) %>%
select(side)
side.of.rep <- filter(body.commit.ID, grepl(rand.commit$results.first_name, legislator.first_name)) %>%
filter(grepl(rand.commit$results.last_name, legislator.last_name)) %>%
as.character(select(side))
side.of.rep <- filter(body.commit.ID, grepl(rand.commit$results.first_name, legislator.first_name)) %>%
filter(grepl(rand.commit$results.last_name, legislator.last_name)) %>%
select(side) %>%
as.character()
View(rand.commit)
rand.commit <- filter(committees.with.names, committee_id == "SSFI")
rep.rand.commit <- paste(rand.commit$results.first_name, rand.commit$results.last_name)
query.params.commit.ID <- paste0("committee_id=", rand.commit$committee_id, "&fields=members,name&per_page=all")
response.commit.ID <- GET(full.uri.commit, query = query.params.commit.ID)
body.commit.ID <- fromJSON(content(response.commit.ID,"text"))$results$members[[1]] %>%
flatten()
committee.chair <- filter(body.commit.ID, grepl("Chair", title))
committee.chair.name <- paste(committee.chair$legislator.first_name, committee.chair$legislator.last_name)
num.of.members <- as.numeric(count(body.commit.ID))
side.of.rep <- filter(body.commit.ID, grepl(rand.commit$results.first_name, legislator.first_name)) %>%
filter(grepl(rand.commit$results.last_name, legislator.last_name)) %>%
select(side) %>%
as.character()
committee.info <- "The Senate Committee on Finance concerns itself primarily with taxes and other revenue measures. They are currently reviewing S.439: A bill to amend part B of title IV of the Social Security Act to ensure that mental health screenings and assessments are provided to children and youth upon entry into foster care."
f.on.committee <- as.numeric(count(legislator.gender == "F"))
f.on.committee <- as.numeric(count(body.commit.ID$legislator.gender == "F"))
f.on.committee <- as.numeric(count(group(body.commit.ID$legislator.gender == "F")))
f.on.committee <- as.numeric(count(group_by(body.commit.ID, legislator.gender == "F")))
f.on.committee <- group_by(body.commit.ID, legislator.gender == "F")
View(f.on.committee)
View(f.on.committee)
View(f.on.committee)
f.on.committee <- count(group_by(body.commit.ID, legislator.gender == "F"))
f.on.committee <- as.numberic(count(group_by(body.commit.ID, legislator.gender == "F")))
f.on.committee <- as.numeric(count(group_by(body.commit.ID, legislator.gender == "F")))
f.on.committee <- count(group_by(body.commit.ID, legislator.gender == "F"))
View(f.on.committee)
View(f.on.committee)
f.on.committee <- filter(body.commit.ID, legislator.gender == "F") %>%
count() %>%
as.numeric()
m.on.committee <- filter(body.commit.ID, legislator.gender == "M") %>%
count() %>%
as.numeric()
f.percent <- paste0(round((f.on.committee / num.of.members) * 100), "%")
m.percent <- paste0(round((m.on.committee / num.of.members) * 100), "%")
ChooseRandCommitID <- function() {
rand <- runif(1, 1, 33)
rand.committee <- committees.with.names$committee_id[rand]
if(committees.with.names$subcommittee[rand] == TRUE) {
ChooseRandCommitID()
} else {
return(filter(committees.with.names, committee_id == rand.committee))
}
}
"The zipcode `r "98105"` is in district `r district`."
data < womensrole
shiny::runApp('C:/Users/Stephanie/Desktop/INFO201Assignments/info201-final-project')
library(dplyr)
library(rsconnect)
library(shiny)
library(ggplot2)
library(plotly)
data <- read.csv('./Data/mental-heath-in-tech-2016.csv')
shinyServer(function(input, output) {
#Steph
output$ComfortLevel <- renderPlot({
#Takes in a two-column dataframe and counts the number of Yes, Maybe, and No responses.
count.responses <- function(data.input) {
data <- data.input
colnames(data) <- c("Mental", "Physical")
#Removing NA Values
data <-  data[!(is.na(data$Mental) | data$Physical==""), ]
#Filtering out Mental health data and counting it
yes.mental <- filter(data, grepl("Yes", Mental)) %>%
count() %>%
as.numeric()
maybe.mental <- filter(data, grepl("Maybe", Mental)) %>%
count() %>%
as.numeric()
no.mental <- filter(data, grepl("No", Mental)) %>%
count() %>%
as.numeric()
mental.impact <- c(yes.mental, maybe.mental, no.mental)
#Filtering out Physical health data and counting it.
yes.physical <- filter(data, grepl("Yes", Physical)) %>%
count() %>%
as.numeric()
maybe.physical <- filter(data, grepl("Maybe", Physical)) %>%
count() %>%
as.numeric()
no.physical <- filter(data, grepl("No", Physical)) %>%
count() %>%
as.numeric()
physical.impact <- c(yes.physical, maybe.physical, no.physical)
#Creating the dataframe
responses <- c("Yes", "Maybe", "No")
data.final <- data.frame(responses, mental, physical)
return(data.final)
}
impact.level <- data[,11:12]
impact.level.num <- count.responses(impact.level)
#Creating functions for each plot
negative.impact <- function(data.input) {
ggplot(data = data.input) +
geom_bar(mapping = aes(x=mental, y = physical, color = responses), size = 3) +
ggtitle("Do you think that discussing this health issue will have negative consequences?") +
labs(x = "Mental Health",
y = "Physical Health", color = "Responses") +
theme_classic() +
xlim(0, 1000) +
ylim(0, 1000)
}
interview <- data.frame(data[,41], data[,39])
interview.num <- count.responses(interview)
#plotting the data
if(input$impact == "Negative Impact") {
ggplot(data = impact.level.num) +
geom_point(mapping = aes(x=mental, y = physical, color = responses), size = 3) +
ggtitle("Do you think that discussing this health issue will have negative consequences?") +
labs(x = "Mental Health",
y = "Physical Health", color = "Responses") +
theme_classic() +
xlim(0, 1000) +
ylim(0, 1000)
} else if (input$impact == "Comfort Level Discussing Health") {
ggplot(data = interview.num) +
geom_point(mapping = aes(x=mental, y = physical, color = responses), size = 3) +
ggtitle("Do you think that discussing this health issue will have negative consequences?") +
labs(x = "Mental Health",
y = "Physical Health", color = "Responses") +
theme_classic() +
xlim(0, 1000) +
ylim(0, 1000)
}  else {}
})
runApp('C:/Users/Stephanie/Desktop/INFO201Assignments/info201-final-project')
runApp('C:/Users/Stephanie/Desktop/INFO201Assignments/info201-final-project')
runApp('C:/Users/Stephanie/Desktop/INFO201Assignments/info201-final-project')
setwd("C:/Users/Stephanie/Desktop/INFO201Assignments/info201-final-project")
data <- read.csv('./Data/mental-heath-in-tech-2016.csv')
runApp('C:/Users/Stephanie/Desktop/INFO201Assignments/info201-final-project')
library(dplyr)
library(rsconnect)
library(shiny)
library(ggplot2)
library(plotly)
data <- read.csv('./Data/mental-heath-in-tech-2016.csv')
shinyServer(function(input, output) {
#Steph
output$ComfortLevel <- renderPlot({
#Takes in a two-column dataframe and counts the number of Yes, Maybe, and No responses.
count.responses <- function(data.input) {
data <- data.input
colnames(data) <- c("Mental", "Physical")
#Removing NA Values
data <-  data[!(is.na(data$Mental) | data$Physical==""), ]
#Filtering out Mental health data and counting it
yes.mental <- filter(data, grepl("Yes", Mental)) %>%
count() %>%
as.numeric()
maybe.mental <- filter(data, grepl("Maybe", Mental)) %>%
count() %>%
as.numeric()
no.mental <- filter(data, grepl("No", Mental)) %>%
count() %>%
as.numeric()
mental.impact <- c(yes.mental, maybe.mental, no.mental)
#Filtering out Physical health data and counting it.
yes.physical <- filter(data, grepl("Yes", Physical)) %>%
count() %>%
as.numeric()
maybe.physical <- filter(data, grepl("Maybe", Physical)) %>%
count() %>%
as.numeric()
no.physical <- filter(data, grepl("No", Physical)) %>%
count() %>%
as.numeric()
physical.impact <- c(yes.physical, maybe.physical, no.physical)
#Creating the dataframe
responses <- c("Yes", "Maybe", "No")
data.final <- data.frame(responses, mental, physical)
return(data.final)
}
impact.level <- data[,11:12]
impact.level.num <- count.responses(impact.level)
#Creating functions for each plot
negative.impact <- function(data.input) {
ggplot(data = data.input) +
geom_bar(mapping = aes(x=mental, y = physical, color = responses), size = 3) +
ggtitle("Do you think that discussing this health issue will have negative consequences?") +
labs(x = "Mental Health",
y = "Physical Health", color = "Responses") +
theme_classic() +
xlim(0, 1000) +
ylim(0, 1000)
}
interview <- data.frame(data[,41], data[,39])
interview.num <- count.responses(interview)
#plotting the data
if(input$impact == "Negative Impact") {
ggplot(data = impact.level.num) +
geom_point(mapping = aes(x=mental, y = physical, color = responses), size = 3) +
ggtitle("Do you think that discussing this health issue will have negative consequences?") +
labs(x = "Mental Health",
y = "Physical Health", color = "Responses") +
theme_classic() +
xlim(0, 1000) +
ylim(0, 1000)
} else if (input$impact == "Comfort Level Discussing Health") {
ggplot(data = interview.num) +
geom_point(mapping = aes(x=mental, y = physical, color = responses), size = 3) +
ggtitle("Do you think that discussing this health issue will have negative consequences?") +
labs(x = "Mental Health",
y = "Physical Health", color = "Responses") +
theme_classic() +
xlim(0, 1000) +
ylim(0, 1000)
}  else {}
})
#End Steph
#Cindy
output$PlotName <- renderPlot({
})
#End Cindy
#Megha
output$plotname <- renderPlot({
})
#End Megha
#Kathy
output$plotname <- renderPlot({
})
#End Kathy
#Zoheb
output$plotZoheb <- renderPlotly({
#columns included : is your anonimity protected, Would you feel comfortable discussing a mental health disorder with your coworkers?,
#Would you feel comfortable discussing a mental health disorder with your direct supervisor(s)?, Do you feel that your employer takes mental health as seriously as physical health?
zoheb.data <- data %>% select(  Is.your.anonymity.protected.if.you.choose.to.take.advantage.of.mental.health.or.substance.abuse.treatment.resources.provided.by.your.employer.,
Would.you.feel.comfortable.discussing.a.mental.health.disorder.with.your.coworkers.,
Would.you.feel.comfortable.discussing.a.mental.health.disorder.with.your.direct.supervisor.s..,
Do.you.feel.that.your.employer.takes.mental.health.as.seriously.as.physical.health.
)
zoheb.data <- zoheb.data %>% filter(Is.your.anonymity.protected.if.you.choose.to.take.advantage.of.mental.health.or.substance.abuse.treatment.resources.provided.by.your.employer. != '') %>%
filter(Would.you.feel.comfortable.discussing.a.mental.health.disorder.with.your.coworkers. != '') %>%
filter(Would.you.feel.comfortable.discussing.a.mental.health.disorder.with.your.direct.supervisor.s.. != '') %>%
filter(Do.you.feel.that.your.employer.takes.mental.health.as.seriously.as.physical.health. != '')
colnames(zoheb.data) <- c('anonimity', 'coworker_discussion', 'supervisor_discussion', 'seriousness_comparison')
#graph formation
types <- as.character(unique(zoheb.data[[input$options]]))
s1 <- as.numeric(sum(zoheb.data[[input$options]] == types[1]))
s2 <- as.numeric(sum(zoheb.data[[input$options]] == types[2]))
s3 <- as.numeric(sum(zoheb.data[[input$options]] == types[3]))
#
descriptions <- c('Is an employee\'s anonimity protected if they choose to take advantage of a mental helth treatment?','Would an employee feel comfortable discussing a mental health disorder with their coworkers?','Would an employee feel comfortable discussing a mental health disorder with their supervisor?','Do employees feel that their employer takes mental health as seriously as physical health?')
titles <- c('anonimity', 'coworker_discussion', 'supervisor_discussion', 'seriousness_comparison')
dynamic.title <- data.frame(titles, descriptions)
#returns plot
return(
plot_ly(
data = zoheb.data,
x = unique(zoheb.data[[input$options]]),
y = c(s1,s2,s3),
type = 'bar'
) %>%
layout(
title = as.character(input$options),
x = 'Options',
y = 'Number of people',
text = as.character(dynamic.title$descriptions[dynamic.title$titles == as.character(input$options)])
)
)
})
#End Zoheb
})
runApp('C:/Users/Stephanie/Desktop/INFO201Assignments/info201-final-project')
library(dplyr)
shiny::runApp('C:/Users/Stephanie/Desktop/INFO201Assignments/info201-final-project')
View(data)
plot <- plot_ly(data = data,
x = ~num.conditions,
y = ~comfort,
z = ~n,
type = "heatmap") %>%
layout(xaxis = list(title = "Number of Diagnosis"),
yaxis = list(title = "Comfortability talking to supervisor"))
return(plot)
}
# Counts number of diagnosis per obersevation
# precondition: diagnosis listed in format of "<condition 1>|<condition 2>|<condition ...>"
#               each condition is seperated by vertical bar
NumDiagnosis <- function(input) {
return(str_split_fixed(input, pattern = "\\|", n = Inf) %>% length())
}
runApp('~/Desktop/info201/info201-final-project')
library(dplyr)
library(stringr)
library(plotly)
# Creates heatmap of relationship between number of diagnosis and comfort with speaking to supervisor
DiagnosisWillingness <- function(data, curr.or.pro.diag, comfort) {
#data <- data %>% filter(Would.you.feel.comfortable.discussing.a.mental.health.disorder.with.your.direct.supervisor.s.. != "",
#                        Would.you.have.been.willing.to.discuss.a.mental.health.issue.with.your.direct.supervisor.s.. != "")
# selects data focusing on either "currently diagnosed with mental health disorder" or
# "was diagnosed with mental health disorders by a professional to dataframe "data
if (curr.or.pro.diag == "curr") {
data <- data %>% filter(Do.you.currently.have.a.mental.health.disorder. == "Yes") %>%
select(If.yes..what.condition.s..have.you.been.diagnosed.with.,
Would.you.feel.comfortable.discussing.a.mental.health.disorder.with.your.direct.supervisor.s..,
Would.you.have.been.willing.to.discuss.a.mental.health.issue.with.your.direct.supervisor.s..)
} else if (curr.or.pro.diag == "pro") {
data <- data %>% filter(Have.you.been.diagnosed.with.a.mental.health.condition.by.a.medical.professional. == "Yes") %>%
select(If.so..what.condition.s..were.you.diagnosed.with.,
Would.you.feel.comfortable.discussing.a.mental.health.disorder.with.your.direct.supervisor.s..,
Would.you.have.been.willing.to.discuss.a.mental.health.issue.with.your.direct.supervisor.s..)
}
# removes uneeded columns from dataframe "data" depending on if asking for comfort speaking to supervisor
# about mental health disorder vs mental health issues
if (comfort == "disorder") {
data$Would.you.feel.comfortable.discussing.a.mental.health.disorder.with.your.direct.supervisor.s.. = NULL
} else if (comfort == "issue") {
data$Would.you.have.been.willing.to.discuss.a.mental.health.issue.with.your.direct.supervisor.s.. = NULL
}
colnames(data) <- c("diagnosis.status", "comfort")
#create list of number of diagnosis per observation
data$num.conditions <- sapply(data$diagnosis.status, NumDiagnosis)
data <- group_by(data, comfort, num.conditions) %>% summarise(n = n())
View(data)
plot <- plot_ly(data = data,
x = ~num.conditions,
y = ~comfort,
z = ~n,
type = "heatmap") %>%
layout(xaxis = list(title = "Number of Diagnosis"),
yaxis = list(title = "Comfortability talking to supervisor"))
return(plot)
}
# Counts number of diagnosis per obersevation
# precondition: diagnosis listed in format of "<condition 1>|<condition 2>|<condition ...>"
#               each condition is seperated by vertical bar
NumDiagnosis <- function(input) {
return(str_split_fixed(input, pattern = "\\|", n = Inf) %>% length())
}
runApp('~/Desktop/info201/info201-final-project')
runApp('~/Desktop/info201/info201-final-project')
library(dplyr)
library(stringr)
library(plotly)
# Creates heatmap of relationship between number of diagnosis and comfort with speaking to supervisor
DiagnosisWillingness <- function(data, curr.or.pro.diag, comfort) {
#data <- data %>% filter(Would.you.feel.comfortable.discussing.a.mental.health.disorder.with.your.direct.supervisor.s.. != "",
#                        Would.you.have.been.willing.to.discuss.a.mental.health.issue.with.your.direct.supervisor.s.. != "")
# selects data focusing on either "currently diagnosed with mental health disorder" or
# "was diagnosed with mental health disorders by a professional to dataframe "data
if (curr.or.pro.diag == "curr") {
data <- data %>% filter(Do.you.currently.have.a.mental.health.disorder. == "Yes") %>%
select(If.yes..what.condition.s..have.you.been.diagnosed.with.,
Would.you.feel.comfortable.discussing.a.mental.health.disorder.with.your.direct.supervisor.s..,
Would.you.have.been.willing.to.discuss.a.mental.health.issue.with.your.direct.supervisor.s..)
} else if (curr.or.pro.diag == "pro") {
data <- data %>% filter(Have.you.been.diagnosed.with.a.mental.health.condition.by.a.medical.professional. == "Yes") %>%
select(If.so..what.condition.s..were.you.diagnosed.with.,
Would.you.feel.comfortable.discussing.a.mental.health.disorder.with.your.direct.supervisor.s..,
Would.you.have.been.willing.to.discuss.a.mental.health.issue.with.your.direct.supervisor.s..)
}
# removes uneeded columns from dataframe "data" depending on if asking for comfort speaking to supervisor
# about mental health disorder vs mental health issues
if (comfort == "disorder") {
data$Would.you.feel.comfortable.discussing.a.mental.health.disorder.with.your.direct.supervisor.s.. = NULL
} else if (comfort == "issue") {
data$Would.you.have.been.willing.to.discuss.a.mental.health.issue.with.your.direct.supervisor.s.. = NULL
}
colnames(data) <- c("diagnosis.status", "comfort")
#create list of number of diagnosis per observation
data$num.conditions <- sapply(data$diagnosis.status, NumDiagnosis)
data <- group_by(data, comfort, num.conditions) %>% summarise(n = n())
data[data == ""] <- "No response"
View(data)
plot <- plot_ly(data = data,
x = ~num.conditions,
y = ~comfort,
z = ~n,
type = "heatmap") %>%
layout(xaxis = list(title = "Number of Diagnosis"),
yaxis = list(title = "Comfortability talking to supervisor"))
return(plot)
}
# Counts number of diagnosis per obersevation
# precondition: diagnosis listed in format of "<condition 1>|<condition 2>|<condition ...>"
#               each condition is seperated by vertical bar
NumDiagnosis <- function(input) {
return(str_split_fixed(input, pattern = "\\|", n = Inf) %>% length())
}
runApp('~/Desktop/info201/info201-final-project')
library(dplyr)
library(stringr)
library(plotly)
# Creates heatmap of relationship between number of diagnosis and comfort with speaking to supervisor
DiagnosisWillingness <- function(data, curr.or.pro.diag, comfort) {
#data <- data %>% filter(Would.you.feel.comfortable.discussing.a.mental.health.disorder.with.your.direct.supervisor.s.. != "",
#                        Would.you.have.been.willing.to.discuss.a.mental.health.issue.with.your.direct.supervisor.s.. != "")
data <- data.frame(data, stringsAsFactors = FALSE)
# selects data focusing on either "currently diagnosed with mental health disorder" or
# "was diagnosed with mental health disorders by a professional to dataframe "data
if (curr.or.pro.diag == "curr") {
data <- data %>% filter(Do.you.currently.have.a.mental.health.disorder. == "Yes") %>%
select(If.yes..what.condition.s..have.you.been.diagnosed.with.,
Would.you.feel.comfortable.discussing.a.mental.health.disorder.with.your.direct.supervisor.s..,
Would.you.have.been.willing.to.discuss.a.mental.health.issue.with.your.direct.supervisor.s..)
} else if (curr.or.pro.diag == "pro") {
data <- data %>% filter(Have.you.been.diagnosed.with.a.mental.health.condition.by.a.medical.professional. == "Yes") %>%
select(If.so..what.condition.s..were.you.diagnosed.with.,
Would.you.feel.comfortable.discussing.a.mental.health.disorder.with.your.direct.supervisor.s..,
Would.you.have.been.willing.to.discuss.a.mental.health.issue.with.your.direct.supervisor.s..)
}
# removes uneeded columns from dataframe "data" depending on if asking for comfort speaking to supervisor
# about mental health disorder vs mental health issues
if (comfort == "disorder") {
data$Would.you.feel.comfortable.discussing.a.mental.health.disorder.with.your.direct.supervisor.s.. = NULL
} else if (comfort == "issue") {
data$Would.you.have.been.willing.to.discuss.a.mental.health.issue.with.your.direct.supervisor.s.. = NULL
}
colnames(data) <- c("diagnosis.status", "comfort")
#create list of number of diagnosis per observation
data$num.conditions <- sapply(data$diagnosis.status, NumDiagnosis)
data <- group_by(data, comfort, num.conditions) %>% summarise(n = n())
data[data == ""] <- "No response"
View(data)
plot <- plot_ly(data = data,
x = ~num.conditions,
y = ~comfort,
z = ~n,
type = "heatmap") %>%
layout(xaxis = list(title = "Number of Diagnosis"),
yaxis = list(title = "Comfortability talking to supervisor"))
return(plot)
}
# Counts number of diagnosis per obersevation
# precondition: diagnosis listed in format of "<condition 1>|<condition 2>|<condition ...>"
#               each condition is seperated by vertical bar
NumDiagnosis <- function(input) {
return(str_split_fixed(input, pattern = "\\|", n = Inf) %>% length())
}
runApp('~/Desktop/info201/info201-final-project')
library(dplyr)
library(stringr)
library(plotly)
# Creates heatmap of relationship between number of diagnosis and comfort with speaking to supervisor
DiagnosisWillingness <- function(data, curr.or.pro.diag, comfort) {
#data <- data %>% filter(Would.you.feel.comfortable.discussing.a.mental.health.disorder.with.your.direct.supervisor.s.. != "",
#                        Would.you.have.been.willing.to.discuss.a.mental.health.issue.with.your.direct.supervisor.s.. != "")
data <- data.frame(data, stringsAsFactors = FALSE)
# selects data focusing on either "currently diagnosed with mental health disorder" or
# "was diagnosed with mental health disorders by a professional to dataframe "data
if (curr.or.pro.diag == "curr") {
data <- data %>% filter(Do.you.currently.have.a.mental.health.disorder. == "Yes") %>%
select(If.yes..what.condition.s..have.you.been.diagnosed.with.,
Would.you.feel.comfortable.discussing.a.mental.health.disorder.with.your.direct.supervisor.s..,
Would.you.have.been.willing.to.discuss.a.mental.health.issue.with.your.direct.supervisor.s..)
} else if (curr.or.pro.diag == "pro") {
data <- data %>% filter(Have.you.been.diagnosed.with.a.mental.health.condition.by.a.medical.professional. == "Yes") %>%
select(If.so..what.condition.s..were.you.diagnosed.with.,
Would.you.feel.comfortable.discussing.a.mental.health.disorder.with.your.direct.supervisor.s..,
Would.you.have.been.willing.to.discuss.a.mental.health.issue.with.your.direct.supervisor.s..)
}
# removes uneeded columns from dataframe "data" depending on if asking for comfort speaking to supervisor
# about mental health disorder vs mental health issues
if (comfort == "disorder") {
data$Would.you.feel.comfortable.discussing.a.mental.health.disorder.with.your.direct.supervisor.s.. = NULL
} else if (comfort == "issue") {
data$Would.you.have.been.willing.to.discuss.a.mental.health.issue.with.your.direct.supervisor.s.. = NULL
}
colnames(data) <- c("diagnosis.status", "comfort")
#create list of number of diagnosis per observation
data$num.conditions <- sapply(data$diagnosis.status, NumDiagnosis)
data <- group_by(data, comfort, num.conditions) %>% summarise(n = n())
data[data == ""] <- "No response"
View(data)
plot <- plot_ly(data = data,
x = ~num.conditions,
y = ~comfort,
z = ~n,
type = "heatmap") %>%
layout(xaxis = list(title = "Number of Diagnosis"),
yaxis = list(title = "Comfortability talking to supervisor"))
return(plot)
}
# Counts number of diagnosis per obersevation
# precondition: diagnosis listed in format of "<condition 1>|<condition 2>|<condition ...>"
#               each condition is seperated by vertical bar
NumDiagnosis <- function(input) {
return(str_split_fixed(input, pattern = "\\|", n = Inf) %>% length())
}
# Creates heatmap of relationship between number of diagnosis and comfort with speaking to supervisor
DiagnosisWillingness <- function(data, curr.or.pro.diag, comfort) {
#data <- data %>% filter(Would.you.feel.comfortable.discussing.a.mental.health.disorder.with.your.direct.supervisor.s.. != "",
#                        Would.you.have.been.willing.to.discuss.a.mental.health.issue.with.your.direct.supervisor.s.. != "")
data <- data.frame(data, stringsAsFactors = FALSE)
# selects data focusing on either "currently diagnosed with mental health disorder" or
# "was diagnosed with mental health disorders by a professional to dataframe "data
if (curr.or.pro.diag == "curr") {
data <- data %>% filter(Do.you.currently.have.a.mental.health.disorder. == "Yes") %>%
select(If.yes..what.condition.s..have.you.been.diagnosed.with.,
Would.you.feel.comfortable.discussing.a.mental.health.disorder.with.your.direct.supervisor.s..,
Would.you.have.been.willing.to.discuss.a.mental.health.issue.with.your.direct.supervisor.s..)
} else if (curr.or.pro.diag == "pro") {
data <- data %>% filter(Have.you.been.diagnosed.with.a.mental.health.condition.by.a.medical.professional. == "Yes") %>%
select(If.so..what.condition.s..were.you.diagnosed.with.,
Would.you.feel.comfortable.discussing.a.mental.health.disorder.with.your.direct.supervisor.s..,
Would.you.have.been.willing.to.discuss.a.mental.health.issue.with.your.direct.supervisor.s..)
}
# removes uneeded columns from dataframe "data" depending on if asking for comfort speaking to supervisor
# about mental health disorder vs mental health issues
if (comfort == "disorder") {
data$Would.you.feel.comfortable.discussing.a.mental.health.disorder.with.your.direct.supervisor.s.. = NULL
} else if (comfort == "issue") {
data$Would.you.have.been.willing.to.discuss.a.mental.health.issue.with.your.direct.supervisor.s.. = NULL
}
colnames(data) <- c("diagnosis.status", "comfort")
#create list of number of diagnosis per observation
data$num.conditions <- sapply(data$diagnosis.status, NumDiagnosis)
data <- group_by(data, comfort, num.conditions) %>% summarise(n = n())
data[data == ""] <- "No response"
View(data)
plot <- plot_ly(data = data,
x = ~num.conditions,
y = ~comfort,
z = ~n,
type = "heatmap") %>%
layout(xaxis = list(title = "Number of Diagnosis"),
yaxis = list(title = "Comfortability talking to supervisor"))
return(plot)
}
runApp('~/Desktop/info201/info201-final-project')
library(dplyr)
library(stringr)
library(plotly)
# Creates heatmap of relationship between number of diagnosis and comfort with speaking to supervisor
DiagnosisWillingness <- function(data, curr.or.pro.diag, comfort) {
#data <- data %>% filter(Would.you.feel.comfortable.discussing.a.mental.health.disorder.with.your.direct.supervisor.s.. != "",
#                        Would.you.have.been.willing.to.discuss.a.mental.health.issue.with.your.direct.supervisor.s.. != "")
#data <- data.frame(data, stringsAsFactors = FALSE)
# selects data focusing on either "currently diagnosed with mental health disorder" or
# "was diagnosed with mental health disorders by a professional to dataframe "data
if (curr.or.pro.diag == "curr") {
data <- data %>% filter(Do.you.currently.have.a.mental.health.disorder. == "Yes") %>%
select(If.yes..what.condition.s..have.you.been.diagnosed.with.,
Would.you.feel.comfortable.discussing.a.mental.health.disorder.with.your.direct.supervisor.s..,
Would.you.have.been.willing.to.discuss.a.mental.health.issue.with.your.direct.supervisor.s..)
} else if (curr.or.pro.diag == "pro") {
data <- data %>% filter(Have.you.been.diagnosed.with.a.mental.health.condition.by.a.medical.professional. == "Yes") %>%
select(If.so..what.condition.s..were.you.diagnosed.with.,
Would.you.feel.comfortable.discussing.a.mental.health.disorder.with.your.direct.supervisor.s..,
Would.you.have.been.willing.to.discuss.a.mental.health.issue.with.your.direct.supervisor.s..)
}
# removes uneeded columns from dataframe "data" depending on if asking for comfort speaking to supervisor
# about mental health disorder vs mental health issues
if (comfort == "disorder") {
data$Would.you.feel.comfortable.discussing.a.mental.health.disorder.with.your.direct.supervisor.s.. = NULL
} else if (comfort == "issue") {
data$Would.you.have.been.willing.to.discuss.a.mental.health.issue.with.your.direct.supervisor.s.. = NULL
}
colnames(data) <- c("diagnosis.status", "comfort")
#create list of number of diagnosis per observation
data$num.conditions <- sapply(data$diagnosis.status, NumDiagnosis)
data <- group_by(data, comfort, num.conditions) %>% summarise(n = n())
data$comfort <- as.character(data$comfort)
data[data$comfort == ""] <- "No response"
plot <- plot_ly(data = data,
x = ~num.conditions,
y = ~comfort,
z = ~n,
type = "heatmap") %>%
layout(xaxis = list(title = "Number of Diagnosis"),
yaxis = list(title = "Comfortability talking to supervisor"))
return(plot)
}
# Counts number of diagnosis per obersevation
# precondition: diagnosis listed in format of "<condition 1>|<condition 2>|<condition ...>"
#               each condition is seperated by vertical bar
NumDiagnosis <- function(input) {
return(str_split_fixed(input, pattern = "\\|", n = Inf) %>% length())
}
setwd("~/Desktop/info201/info201-final-project")
runApp()
library(dplyr)
library(stringr)
library(plotly)
# Creates heatmap of relationship between number of diagnosis and comfort with speaking to supervisor
DiagnosisWillingness <- function(data, curr.or.pro.diag, comfort) {
data <- data.frame(data, stringsAsFactors = FALSE)
# selects data focusing on either "currently diagnosed with mental health disorder" or
# "was diagnosed with mental health disorders by a professional to dataframe "data
if (curr.or.pro.diag == "curr") {
data <- data %>% filter(Do.you.currently.have.a.mental.health.disorder. == "Yes") %>%
select(If.yes..what.condition.s..have.you.been.diagnosed.with.,
Would.you.feel.comfortable.discussing.a.mental.health.disorder.with.your.direct.supervisor.s..,
Would.you.have.been.willing.to.discuss.a.mental.health.issue.with.your.direct.supervisor.s..)
} else if (curr.or.pro.diag == "pro") {
data <- data %>% filter(Have.you.been.diagnosed.with.a.mental.health.condition.by.a.medical.professional. == "Yes") %>%
select(If.so..what.condition.s..were.you.diagnosed.with.,
Would.you.feel.comfortable.discussing.a.mental.health.disorder.with.your.direct.supervisor.s..,
Would.you.have.been.willing.to.discuss.a.mental.health.issue.with.your.direct.supervisor.s..)
}
# removes uneeded columns from dataframe "data" depending on if asking for comfort speaking to supervisor
# about mental health disorder vs mental health issues
if (comfort == "disorder") {
data$Would.you.feel.comfortable.discussing.a.mental.health.disorder.with.your.direct.supervisor.s.. = NULL
} else if (comfort == "issue") {
data$Would.you.have.been.willing.to.discuss.a.mental.health.issue.with.your.direct.supervisor.s.. = NULL
}
colnames(data) <- c("diagnosis.status", "comfort")
#create list of number of diagnosis per observation
data$num.conditions <- sapply(data$diagnosis.status, NumDiagnosis)
data <- group_by(data, comfort, num.conditions) %>% summarise(n = n())
plot <- plot_ly(data = data,
x = ~num.conditions,
y = ~comfort,
z = ~n,
type = "heatmap") %>%
layout(xaxis = list(title = "Number of Diagnosis"),
yaxis = list(title = "Comfortability talking to supervisor"))
return(plot)
}
# Counts number of diagnosis per obersevation
# precondition: diagnosis listed in format of "<condition 1>|<condition 2>|<condition ...>"
#               each condition is seperated by vertical bar
NumDiagnosis <- function(input) {
return(str_split_fixed(input, pattern = "\\|", n = Inf) %>% length())
}
runApp()
library(dplyr)
library(stringr)
library(plotly)
# Creates heatmap of relationship between number of diagnosis and comfort with speaking to supervisor
DiagnosisWillingness <- function(data, curr.or.pro.diag, comfort) {
data <- data.frame(data, stringsAsFactors = FALSE)
data[data == ""] <- "No response"
# selects data focusing on either "currently diagnosed with mental health disorder" or
# "was diagnosed with mental health disorders by a professional to dataframe "data
if (curr.or.pro.diag == "curr") {
data <- data %>% filter(Do.you.currently.have.a.mental.health.disorder. == "Yes") %>%
select(If.yes..what.condition.s..have.you.been.diagnosed.with.,
Would.you.feel.comfortable.discussing.a.mental.health.disorder.with.your.direct.supervisor.s..,
Would.you.have.been.willing.to.discuss.a.mental.health.issue.with.your.direct.supervisor.s..)
} else if (curr.or.pro.diag == "pro") {
data <- data %>% filter(Have.you.been.diagnosed.with.a.mental.health.condition.by.a.medical.professional. == "Yes") %>%
select(If.so..what.condition.s..were.you.diagnosed.with.,
Would.you.feel.comfortable.discussing.a.mental.health.disorder.with.your.direct.supervisor.s..,
Would.you.have.been.willing.to.discuss.a.mental.health.issue.with.your.direct.supervisor.s..)
}
# removes uneeded columns from dataframe "data" depending on if asking for comfort speaking to supervisor
# about mental health disorder vs mental health issues
if (comfort == "disorder") {
data$Would.you.feel.comfortable.discussing.a.mental.health.disorder.with.your.direct.supervisor.s.. = NULL
} else if (comfort == "issue") {
data$Would.you.have.been.willing.to.discuss.a.mental.health.issue.with.your.direct.supervisor.s.. = NULL
}
colnames(data) <- c("diagnosis.status", "comfort")
View(data)
#create list of number of diagnosis per observation
data$num.conditions <- sapply(data$diagnosis.status, NumDiagnosis)
data <- group_by(data, comfort, num.conditions) %>% summarise(n = n())
plot <- plot_ly(data = data,
x = ~num.conditions,
y = ~comfort,
z = ~n,
type = "heatmap") %>%
layout(xaxis = list(title = "Number of Diagnosis"),
yaxis = list(title = "Comfortability talking to supervisor"))
return(plot)
}
# Counts number of diagnosis per obersevation
# precondition: diagnosis listed in format of "<condition 1>|<condition 2>|<condition ...>"
#               each condition is seperated by vertical bar
NumDiagnosis <- function(input) {
return(str_split_fixed(input, pattern = "\\|", n = Inf) %>% length())
}
runApp()