<<<<<<< HEAD
results.district <- fromJSON(body.district)
flattened.district <- flatten(results.district$results)
my.district <- flattened.district$district[[1]]
# part 2
base.url.legislators <- 'https://congress.api.sunlightfoundation.com/legislators/locate'
query.params.legislators <- list(zip = my.zip)
response.legislators <- GET(base.url.legislators, query = query.params.legislators)
body.legislators <- content(response.legislators, "text")
results.legislators <- fromJSON(body.legislators)
flattened.legislators <- flatten(results.legislators$results) %>%
select(first_name, last_name, title, party, chamber, phone, website, twitter_id)
legislators.table <- kable(flattened.legislators, col.names = c('First Name', 'Last Name', 'Title', 'Party', 'Chamber', 'Phone', 'Website', 'Twitter'))
# part 3
GetCommittees <- function(rep.id) {
base.url.committees <- 'https://congress.api.sunlightfoundation.com/committees'
query.params.committees <- list(member_ids = rep.id)
response.committees <- GET(base.url.committees, query = query.params.committees)
body.committees <- content(response.committees, "text")
results.committees <- fromJSON(body.committees)
flattened.committees <- flatten(results.committees$results) %>%
select(chamber, committee_id, name, subcommittee, parent_committee_id) %>%
mutate(bioguide_id = rep.id)
return (flattened.committees)
}
# dataframe of reps
get.reps <- flatten(results.legislators$results)
# a list of dataframe, each containing the committee per rep.
get.reps.committees <- lapply(get.reps$bioguide_id, FUN=GetCommittees) # returns a list/vector of the dataframe that are actually lists
# combining into one dataframe and joining
combined.rep.committees <- do.call("rbind", get.reps.committees)
joined.rep.committees <- left_join(combined.rep.committees, flattened.legislators, by = 'bioguide_id') %>%
select(name, bioguide_id, first_name, last_name)
flattened.legislators
get.reps <- flatten(results.legislators$results)
# a list of dataframe, each containing the committee per rep.
get.reps.committees <- lapply(get.reps$bioguide_id, FUN=GetCommittees) # returns a list/vector of the dataframe that are actually lists
# combining into one dataframe and joining
combined.rep.committees <- do.call("rbind", get.reps.committees) %>%
left_join(combined.rep.committees, get.reps, by = 'bioguide_id') %>%
select(name, bioguide_id, first_name, last_name)
get.reps <- flatten(results.legislators$results)
# a list of dataframe, each containing the committee per rep.
get.reps.committees <- lapply(get.reps$bioguide_id, FUN=GetCommittees) # returns a list/vector of the dataframe that are actually lists
# combining into one dataframe and joining
combined.rep.committees <- do.call("rbind", get.reps.committees) %>%
left_join(get.reps, by = 'bioguide_id') %>%
select(name, bioguide_id, first_name, last_name)
tests <- plot(barplot(counts, main="Committees Served on by Each Rep.", horiz=TRUE, xlab = '# Committees'))
counts <- table(responseName = paste(combined.rep.committees$first_name, combined.rep.committees$last_name)) %>% sort()
tests <- plot(barplot(counts, main="Committees Served on by Each Rep.", horiz=TRUE, xlab = '# Committees'))
tests <- barplot(counts, main="Committees Served on by Each Rep.", horiz=TRUE, xlab = '# Committees')
tests
par(mfrow = ncol(counts))
ncol(counts)
count(counts)
par(mfrow = unique(combined.rep.committees$bioguide_id) %>% count())
par(mfrow = count(unique(combined.rep.committees$bioguide_id)))
tests <- barplot(counts, main="Committees Served on by Each Rep.", horiz=TRUE, xlab = '# Committees')
par(mfrow = 3)
par(mfrow=c(3, 16))
par(mfrow=c(3, 15))
par(mar=c(10, 10, 10, 10))
par(mar=c(5, 5, 5, 5))
par(mar=c(8, 8, 8, 8))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(jsonlite)
library(httr)
library(knitr)
website.links <- paste0("<a href='", flattened.legislators$website, "'> link </a>")
twitter.links <- paste0("<a href='https://twitter.com/", flattened.legislators$twitter_id, "'> link </a>")
my.zip <- 98105L
base.url.district <- 'https://congress.api.sunlightfoundation.com/districts/locate'
query.params.district <- list(zip = my.zip)
response.district <- GET(base.url.district, query = query.params.district)
body.district <- content(response.district, "text")
results.district <- fromJSON(body.district)
flattened.district <- flatten(results.district$results)
my.district <- flattened.district$district[[1]]
# part 2
base.url.legislators <- 'https://congress.api.sunlightfoundation.com/legislators/locate'
query.params.legislators <- list(zip = my.zip)
response.legislators <- GET(base.url.legislators, query = query.params.legislators)
body.legislators <- content(response.legislators, "text")
results.legislators <- fromJSON(body.legislators)
flattened.legislators <- flatten(results.legislators$results) %>%
select(first_name, last_name, title, party, chamber, phone, website, twitter_id)
flattened.legislators$website <- paste0("<a href='", flattened.legislators$website, "'> link </a>")
flattened.legislators$twitter_id <- paste0("<a href='https://twitter.com/", flattened.legislators$twitter_id, "'> link </a>")
legislators.table <- kable(flattened.legislators, col.names = c('First Name', 'Last Name', 'Title', 'Party', 'Chamber', 'Phone', 'Website', 'Twitter'))
library(ggplot2)
library(dplyr)
View(diamonds)
sample_n(diamonds)
diamonds.sample <- sample_n(diamonds)
diamonds.sample <- sample_n(diamonds, 1000)
View(diamonds.sample)
ggplot(data = diamonds.sample)
ggplot(data = diamonds.sample$price)
ggplot(data = diamonds.sample) +   geom_point(mapping = aes(x = carat, y = price))
ggplot(data = diamonds.sample) +   geom_point(mapping = aes(x = carat, y = price, color = clarity))
ggplot(data = diamonds) +   geom_point(mapping = aes(x = carat, y = price, color = clarity))
ggplot(data = diamonds.sample) + geom_point(mapping = aes(x = carat, y = price, color = 'blue'))
ggplot(data = diamonds.sample) + geom_point(mapping = aes(x = carat, y = price, colour = 'blue'))
ggplot(data = diamonds.sample) + geom_point(colour = 'blue', mapping = aes(x = carat, y = price))
ggplot(data = diamonds.sample) + geom_point(aes(shape = cut), mapping = aes(x = carat, y = price))
ggplot(data = diamonds.sample) + geom_point(aes(shape = factor(cut)), mapping = aes(x = carat, y = price))
ggplot(data = diamonds.sample) + geom_point(aes(x = carat, y = price, shape=cut))
ggplot(data = diamonds.sample) + geom_point(aes(x = carat, y = cut, size=price))
ggplot(data = diamonds.sample) + geom_point(aes(x = carat, y = cut, size=price, color=price))
ggplot(data = diamonds.sample) + geom_line(aes(x = carat, y = cut, color=price))
ggplot(data = diamonds.sample) + geom_line(mapping = aes(x = carat, y = cut, color=price))
ggplot(data = diamonds.sample) + geom_point(mapping = aes(x = carat, y = cut, size=price, color=price))
ggplot(data = diamonds.sample) + geom_line(mapping = aes(x = carat, y = cut, color=price))
ggplot(data = diamonds.sample) + geom_line(mapping = aes(x = carat, y = carat, color=price))
ggplot(data = diamonds.sample) + geom_line(mapping = aes(x = carat, y = price, color=carat))
ggplot(data = diamonds.sample) + geom_smooth(mapping = aes(x = carat, y = price, color=carat))
ggplot(data = diamonds.sample) + geom_bar(mapping = aes(x = cut, y = price, color=carat))
ggplot(data = diamonds.sample) + geom_bar(mapping = aes(x = cut, y = price))
ggplot(data = diamonds.sample) + geom_bar(mapping = aes(x = cut))
library(ggplot2)
ggplot(data = mpg) + geom_bar(mapping = aes(x = cut), stat="count")
ggplot(data = mpg) + geom_bar(mapping = aes(x = cut))
ggplot(data = mpg) + geom_bar(mapping = aes(x = cut), stat="count")
ggplot(data = mpg) + geom_bar(aes(x = cut), stat="count")
ggplot(data = diamonds) + geom_bar(aes(x = cut), stat="count")
ggplot(data = diamonds) + stat_count(mapping = aes(x=cut))
ggplot(data = diamonds) + stat_summary(mapping = aes(x = cut, y = depth))
ggplot(data = diamonds) + stat_summary(mapping = aes(x = cut, y = depth), fun.ymin = min, fun.ymax = max, fun.y = median)
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut), filling = clarity)
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity))
grouped.dates <- shooting.data %>% group_by(date)
library(dplyr)
library(knitr)
library(ggplot2)
library(plotly)
grouped.dates <- shooting.data %>% group_by(date)
shooting.data <- read.csv('./data/shootings-2016.csv')
grouped.dates <- shooting.data %>% group_by(date)
grouped.dates
grouped.dates <- shooting.data %>% mutate(total = (injured + killed)) %>% group_by(date)
grouped.dates
grouped.dates <- shooting.data %>% mutate(total = (injured + killed)) %>% group_by(date) %>%
aggregate(grouped.dates[,'total'], by=list(grouped.dates$state), "sum")
grouped.dates <- shooting.data %>% mutate(total = (injured + killed)) %>% group_by(date)
sum.groups <- aggregate(grouped.dates[,'total'], by=list(grouped.dates$state), "sum")
sum.groups
sum.groups <- aggregate(grouped.dates[,'total'], by=list(grouped.dates$dates), "sum")
sum.groups <- aggregate(grouped.dates[,'total'], by=list(grouped.dates$date), "sum")
sum.groups
sum.groups[1]
sum.groups[1,1]
typeof(sum.groups[1,1])
sum.groups.month
sum.groups[1,1].month
sum.groups[1,1].m
sum.groups[1,1].mon
sum.groups[1,1] == 'April 10, 2016'
sum.groups[1,1] == '04/10/2016'
sum.groups[1,1] == '04/10/16'
sum.groups[1,1] == 'April'
sum.groups[1,1].month
sum.groups[1,1][month]
?as.date
?as.Date
as.Date(sum.groups[1,1])
as.Date(sum.groups[1,1], "%Y-%m-%d")
as.Date(sum.groups[1,1], "%m/%d/%Y")
shooting.data[1,1]
is.Date(sum.groups[1,1])
is.date(sum.groups[1,1])
is.date(as.character(sum.groups[1,1]), "%m/%d/%Y")
as.Date(as.character(sum.groups[1,1]), "%m/%d/%Y")
p <- plot_ly(data = sum.groups, x = ~sum.groups$date, y = ~sum.groups$total)
p
library(plotly)
p <- plot_ly(data = sum.groups, x = ~sum.groups$date, y = ~sum.groups$total)
p
p <- plot_ly(data = sum.groups, x = ~sum.groups$date, y = ~sum.groups$total, type = 'scatter', mode = 'markers' )
p
p <- plot_ly(data = sum.groups, x = ~date, y = ~total, type = 'scatter', mode = 'markers' )
p
sum.groups <- aggregate(grouped.dates[,'total'], by=list(grouped.dates$date), "sum")
sum.groups
p <- plot_ly(data = sum.groups, x = ~date, y = ~total, type = 'scatter', mode = 'markers' )
p
p <- plot_ly(data = sum.groups, x = sum.groups$date, y = ~total, type = 'scatter', mode = 'markers' )
p
sum.groups$date
p <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'markers' )
p
par(mar=c(8, 8, 8, 8))
p <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'markers' )
p
par(mar=c(10, 10, 10, 10))
plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'markers' )
build <- plotly_build(p)
str(p)
p$layout$margin$b <- 220
p
p$layout$margin$b <- 1000
p
p <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'markers' ) %>%
layout(xaxis = list(tickangle = 45))
p
p <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'markers' ) %>%
layout(margin = list(b = 160), xaxis = list(tickangle = 45))
p
p <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'markers' ) %>%
layout(margin = list(b = 160, r = 50), xaxis = list(tickangle = 45))
p
p <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', marker = list(size = 10,
color = 'rgba(255, 182, 193, .9)',
line = list(color = 'rgba(152, 0, 0, .8)',
width = 2))) %>%
layout(margin = list(b = 160, r = 50), xaxis = list(tickangle = 45))
p
p <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'marker', marker = list(size = 10,
color = 'rgba(255, 182, 193, .9)',
line = list(color = 'rgba(152, 0, 0, .8)',
width = 2))) %>%
layout(margin = list(b = 160, r = 50), xaxis = list(tickangle = 45))
p
p <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'marker', marker = list(size = 10,
color = 'rgba(255, 182, 193, .9)')) %>%
layout(margin = list(b = 160, r = 50), xaxis = list(tickangle = 45))
p
p <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'marker', marker = list(size = 10,
color = 'rgba(255, 182, 193, 1)')) %>%
layout(margin = list(b = 160, r = 50), xaxis = list(tickangle = 45))
p
p <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'marker', marker = list(size = 10,
color = 'rgba(255, 182, 193)')) %>%
layout(margin = list(b = 160, r = 50), xaxis = list(tickangle = 45))
p
p <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'marker', marker = list(size = 10,
color = 'rgba(255, 182, 193, 1.0)')) %>%
layout(margin = list(b = 160, r = 50), xaxis = list(tickangle = 45))
p
p <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'marker', marker = list(size = 10,
color = ~total) %>%
layout(margin = list(b = 160, r = 50), xaxis = list(tickangle = 45))
p
p
p <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'marker', marker = list(size = 10,
color = ~total) %>%
layout(margin = list(b = 160, r = 50), xaxis = list(tickangle = 45))
p
p <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'marker', marker = list(size = 10,
color = ~total) %>% layout(margin = list(b = 160, r = 50), xaxis = list(tickangle = 45))
p <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'marker',
p <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'marker',
marker = list(size = 10, color = ~total) %>%
layout(margin = list(b = 160, r = 50), xaxis = list(tickangle = 45)))
p <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'marker',
marker = list(size = 10, color = ~total)) %>%
layout(margin = list(b = 160, r = 50), xaxis = list(tickangle = 45))
p
p <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'marker',
marker = list(size = 10, color = ~total)) %>%
layout(margin = list(b = 160, r = 50), xaxis = list(title = 'Dates', tickangle = 45))
p
p <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'marker',
marker = list(size = 10, color = ~total)) %>%
layout(margin = list(b = 160, r = 50), xaxis = list(title = 'Dates', tickangle = 45),
yaxis = list(title = 'Total Casualties'))
p
dates.casualties <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'marker',
marker = list(size = 10, color = ~total)) %>%
layout(margin = list(b = 160, r = 50), xaxis = list(title = 'Dates', tickangle = 45),
yaxis = list(title = 'Total Casualties'))
as.Dates(sum.groups[1,1], '%B %d, %y')
as.Date(sum.groups[1,1], '%B %d, %y')
sum.groups[1,1]
as.Date(sum.groups$Group.1, '%B %d, %y')
sum.groups$Group.1 <- as.Date(sum.groups$Group.1, '%B %d, %y')
sum.groups
test <- aggregate(grouped.dates[,'total'], by=list(grouped.dates$date), "sum")
test <- mutate(month = format(date, "%m")) %>% aggregate(grouped.dates[,'total'], by=list(grouped.dates$month), "sum")
test <- mutate(month = format(date, "%m"))
test <- grouped.dates %>% mutate(month = format(date, "%m"))
test <- sum.groups %>% mutate(month = format(date, "%m"))
test <- sum.groups %>% mutate(month = format(Group.1, "%m"))
test
test <- sum.groups %>% mutate(month = format(Group.1, "%m")) %>% aggregate(grouped.dates[,'total'], by=list(grouped.dates$month), "sum")
test <- sum.groups %>% mutate(month = format(Group.1, "%m")) %>% aggregate(sum.groups[,'total'], by=list(sum.groups$month), "sum")
test2 <- aggregate(sum.groups[,'total'], by=list(sum.groups$month), "sum")
test2 <- aggregate(test[,'total'], by=list(test$month), "sum")
test2
sum.groups <- aggregate(grouped.dates[,'total'], by=list(grouped.dates$date), "sum")
sum.groups
sum.groups <- aggregate(grouped.dates[,'total'], by=list(grouped.dates$date), "sum") %>% mutate(month = format(Group.1, "%m"))
sum.groups <- aggregate(grouped.dates[,'total'], by=list(grouped.dates$date), "sum") %>% mutate(month = format(date, "%m"))
sum.groups <- mutate(month = format(Group.1, "%m"))
sum.groups <- sum.groups %>% mutate(month = format(Group.1, "%m"))
sum.groups
typeof(sum.groups[1,1])
grouped.dates$date <- as.Date(grouped.dates$date, '%B %d, %y') # converting characters into Date objects
sum.groups <- aggregate(grouped.dates[,'total'], by=list(grouped.dates$date), "sum")
sum.groups <- sum.groups %>% mutate(month = format(Group.1, "%m"))
sum.groups
sum.groups <- sum.groups %>% mutate(month = format(Group.1, "%m")) %>% select(month, total)
sum.groups
grouped.dates$date <- as.Date(grouped.dates$date, '%B %d, %y') mutate(month = format(date, "%m")) %>% select(month, total)
grouped.dates$date <- as.Date(grouped.dates$date, '%B %d, %y') %>% mutate(month = format(date, "%m")) %>% select(month, total)
grouped.dates <- mutate(month = format(date, "%m")) %>% select(month, total)
grouped.dates <- grouped.dates %>% mutate(month = format(date, "%m")) %>% select(month, total)
grouped.dates
grouped.dates <- grouped.dates %>% mutate(month = format(date, "%m")) %>% select(month, total)
grouped.dates <- grouped.dates %>% mutate(month = format(date, "%m"))
grouped.dates$date <- as.Date(grouped.dates$date, '%B %d, 2016')
grouped.dates <- grouped.dates %>% mutate(month = format(date, "%m"))
grouped.dates
grouped.dates$date <- as.Date(grouped.dates$date, '%B %d, %y')
grouped.dates
grouped.dates <- grouped.dates %>% mutate(month = format(date, "%m"))
grouped.dates$date <- as.Date(grouped.dates$date, '%B %d, %Y') # ignore year
grouped.dates
grouped.dates$date <- as.Date(grouped.dates$date, '%B %d, %y') # ignore year
grouped.dates
grouped.dates$date <- as.Date(grouped.dates$date, '%B %d') # ignore year
grouped.dates
grouped.dates$date <- as.Date(grouped.dates$date, '%B %d, %Y') # ignore year
grouped.dates <- grouped.dates %>% mutate(month = format(date, "%m"))
sum.groups <- aggregate(grouped.dates[,'total'], by=list(grouped.dates$month), "sum")
sum.groups
dates.casualties <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'marker',
marker = list(size = 10, color = ~total)) %>%
layout(margin = list(b = 160, r = 50), xaxis = list(title = 'Dates', tickangle = 45),
yaxis = list(title = 'Total Casualties'))
dates.casualties
dates.casualties <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'marker',
marker = list(size = 10, color = ~total)) %>%
layout(xaxis = list(title = 'Dates', tickangle = 45),
yaxis = list(title = 'Total Casualties'))
dates.casualties
grouped.dates <- grouped.dates %>% mutate(month = format(date, "%B"))
grouped.dates
sum.groups <- aggregate(grouped.dates[,'total'], by=list(grouped.dates$month), "sum")
sum.groups
dates.casualties <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'marker',
marker = list(size = 10, color = ~total)) %>%
layout(xaxis = list(title = 'Dates', tickangle = 45),
yaxis = list(title = 'Total Casualties'))
dates.casualties
grouped.dates <- grouped.dates %>% mutate(month = format(date, "%m"))
sum.groups <- aggregate(grouped.dates[,'total'], by=list(grouped.dates$month), "sum")
dates.casualties <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'marker',
marker = list(size = 10, color = ~total)) %>%
layout(xaxis = list(title = 'Dates', tickangle = 45),
yaxis = list(title = 'Total Casualties'))
dates.casualties
dates.casualties <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'marker',
marker = list(size = 10, color = ~total)) %>%
layout(xaxis = list(title = 'Months', tickangle = 45),
yaxis = list(title = 'Total Casualties'))
grouped.dates <- shooting.data %>% mutate(total = (injured + killed))
grouped.dates$date <- as.Date(grouped.dates$date, '%B %d, %Y') # ignore year
grouped.dates <- grouped.dates %>% mutate(month = format(date, "%m"))
sum.groups <- aggregate(grouped.dates[,'total'], by=list(grouped.dates$month), "sum")
dates.casualties <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'marker',
marker = list(size = 10, color = ~total)) %>%
layout(xaxis = list(title = 'Months', tickangle = 45),
yaxis = list(title = 'Total Casualties'))
dates.casualties <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'marker',
marker = list(size = 10, color = sum.groups$total)) %>%
layout(xaxis = list(title = 'Months', tickangle = 45),
yaxis = list(title = 'Total Casualties'))
dates.casualties <- plot_ly(data = sum.groups, x = ~Group.1, y = sum.groups$total, type = 'scatter', mode = 'marker',
marker = list(size = 10, color = sum.groups$total)) %>%
layout(xaxis = list(title = 'Months', tickangle = 45),
yaxis = list(title = 'Total Casualties'))
sum.groups
dates.casualties <- plot_ly(data = sum.groups, x = ~Group.1, y = ~x, type = 'scatter', mode = 'marker',
marker = list(size = 10, color = ~x)) %>%
layout(xaxis = list(title = 'Months', tickangle = 45),
yaxis = list(title = 'Total Casualties'))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(knitr)
library(ggplot2)
library(plotly)
shooting.data <- read.csv('./data/shootings-2016.csv')
top.10.casualties <- aggregate(sum.of.casualties[,'total'], by=list(sum.of.casualties[['state']]), "sum") %>%
arrange(-x) %>%
top_n(10) %>%
kable(col.names = c('State', 'Total Casualties'), align='l')
sum.of.casualties <- shooting.data %>%
mutate(total = (injured + killed))
top.10.casualties <- aggregate(sum.of.casualties[,'total'], by=list(sum.of.casualties[['state']]), "sum") %>%
arrange(-x) %>%
top_n(10) %>%
kable(col.names = c('State', 'Total Casualties'), align='l')
shooting.occurred <- nrow(shooting.data)
lives.lost <- sum(shooting.data$killed)
# affected will be defined as the most injured and killed combined.
most.affected <- shooting.data %>%
mutate(total = (injured + killed)) %>%
arrange(-total) %>%
top_n(3)
most.shooting <- table(shooting.data[['state']]) %>%
as.data.frame() %>%
arrange(-Freq) %>%
top_n(1)
grouped.dates <- shooting.data %>%
mutate(total = (injured + killed))
grouped.dates$date <- as.Date(grouped.dates[['date']], '%B %d, %Y') # ignore year
grouped.dates <- grouped.dates %>%
mutate(month = format(date, "%m"))
sum.groups <- aggregate(grouped.dates[,'total'], by=list(grouped.dates[['month']]), "sum") # sum of casualties per month
dates.casualties <- plot_ly(data = sum.groups, x = ~Group.1, y = ~x, type = 'scatter', mode = 'marker',
marker = list(size = 10, color = ~x)) %>%
layout(xaxis = list(title = 'Months', tickangle = 45),
yaxis = list(title = 'Total Casualties'))
## Chart One ##
``` {r Chart One, echo = FALSE, message = FALSE}
source("./scripts/chart1.R")
ChartOne(data = data)
```
data <- read.csv('./data/intro-survey.csv')
source("./scripts/chart1.R")
ChartOne(data = data)
source("./scripts/Chart_2.R")
Chart_2(data)
Chart_2(data)
source("./scripts/Chart3.R")
Chart3(data)
colnames(data)
data$How.many.siblings.do.you.have.
View(data)
data <- select(data, countries = contains("countries"), siblings = contains("siblings"), standing = contains("standing")) %>%
filter(is.na(siblings) == FALSE) %>%
group_by(siblings)
data <- select(data, countries = contains("countries"), siblings = contains("siblings"), standing = contains("standing")) %>%
filter(is.na(How.many.siblings.do.you.have.) == FALSE) %>%
group_by(siblings)
data <- read.csv('./data/intro-survey.csv', na.rm == TRUE)
data <- read.csv('./data/intro-survey.csv', na.rm = TRUE)
data <- read.csv('./data/intro-survey.csv', NA.rm = TRUE)
test.omit <- na.omit(data)
test.omit
View(test.omit)
Chart3(data)
source("./scripts/Chart3.R")
Chart3(data)
source("./scripts/Chart3.R")
Chart3(data)
source("./scripts/Chart3.R")
Chart3(data)
source("./scripts/Chart3.R")
Chart3(data)
source("./scripts/Chart3.R")
Chart3(data)
graph <- ggplot(data = value.set, aes(x = countries, y = siblings)) +
geom_violin(scale = "area", trim = FALSE, fill = "deepskyblue", color = "darkblue") +
labs(title = "Plot of countries travelled by the number of siblings", x = "No. of Countries", y = "No. of Siblings") +
theme_classic()
source("./scripts/Chart3.R")
Chart3(data)
source("./scripts/Chart3.R")
Chart3(data)
shiny::runApp('C:/Users/nguye/Desktop/201/a8-building-apps-cnguyen0')
runApp('C:/Users/nguye/Desktop/201/a8-building-apps-cnguyen0')
View(cereal.df)
runApp('C:/Users/nguye/Desktop/201/a8-building-apps-cnguyen0')
library(dplyr)
library(stringr)
library(ggplot2)
install.packages('janeaustenr')
install.packages('tidytext')
library(janeaustenr)
library(tidytext)
booksinto.df <- booksinto
booksinto.df <- austen_books(booksinto)
booksinto.df <- austen_books()
booksinto.df
View(booksinto.df)
unique(booksinto.df[,'book'])
length(unique(booksinto.df[,'book']))
nrow(unique(booksinto.df[,'book']))
num.of.books <- nrow(unique(booksinto.df[,'book']))
rm(list=ls())
setwd("C:/Users/nguye/Desktop/201/info201-final-project")
data <- read.csv('./Data/mental-heath-in-tech-2016.csv')
View(data)
colnames(data)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data$Do.you.have.a.family.history.of.mental.illness.
runApp()
runApp()
runApp()
runApp()
runApp()
data %>% filter(Do.you.have.a.family.history.of.mental.illness. == 'Yes') %>% select(Do.you.know.local.or.online.resources.to.seek.help.for.a.mental.health.disorder)
data %>% filter(Do.you.have.a.family.history.of.mental.illness. == 'Yes') %>% select(Do.you.know.local.or.online.resources.to.seek.help.for.a.mental.health.disorder.)
data %>% filter(Do.you.have.a.family.history.of.mental.illness. == 'Yes') %>% filter(Do.you.know.local.or.online.resources.to.seek.help.for.a.mental.health.disorder. != '')
data %>% filter(Do.you.have.a.family.history.of.mental.illness. == 'Yes') %>% filter(Do.you.know.local.or.online.resources.to.seek.help.for.a.mental.health.disorder. != '') %>% select(Do.you.know.local.or.online.resources.to.seek.help.for.a.mental.health.disorder.)
runApp()
runApp()
runApp()
colnames(data)
runApp()
=======
library(dplyr)
library(rsconnect)
output$ComfortLevel <- renderPlot({
comfort.level <- data[,11:12]
colnames(comfort.level) <- c("Mental", "Physical")
#Removing NA Values
comfort.level <-  comfort.level[!(is.na(comfort.level$Mental) | comfort.level$Physical==""), ]
#Filtering out Mental health data
yes.mental <- filter(comfort.level, grepl("Yes", Mental)) %>%
count() %>%
as.numeric()
maybe.mental <- filter(comfort.level, grepl("Maybe", Mental)) %>%
count() %>%
as.numeric()
no.mental <- filter(comfort.level, grepl("No", Mental)) %>%
count() %>%
as.numeric()
mental <- c(yes.mental, maybe.mental, no.mental)
#Filtering out Physical health data
yes.physical <- filter(comfort.level, grepl("Yes", Physical)) %>%
count() %>%
as.numeric()
maybe.physical <- filter(comfort.level, grepl("Maybe", Physical)) %>%
count() %>%
as.numeric()
no.physical <- filter(comfort.level, grepl("No", Physical)) %>%
count() %>%
as.numeric()
physical <- c(yes.physical, maybe.physical, no.physical)
#Creating the dataframe
comfort.level.num <- data.frame(mental, physical)
#plotting the data
ggplot(data = comfort.level) +
geom_point(mapping = aes(x=Mental, y = Physical))
})
library(shiny)
#Steph
output$ComfortLevel <- renderPlot({
comfort.level <- data[,11:12]
colnames(comfort.level) <- c("Mental", "Physical")
#Removing NA Values
comfort.level <-  comfort.level[!(is.na(comfort.level$Mental) | comfort.level$Physical==""), ]
#Filtering out Mental health data
yes.mental <- filter(comfort.level, grepl("Yes", Mental)) %>%
count() %>%
as.numeric()
maybe.mental <- filter(comfort.level, grepl("Maybe", Mental)) %>%
count() %>%
as.numeric()
no.mental <- filter(comfort.level, grepl("No", Mental)) %>%
count() %>%
as.numeric()
mental <- c(yes.mental, maybe.mental, no.mental)
#Filtering out Physical health data
yes.physical <- filter(comfort.level, grepl("Yes", Physical)) %>%
count() %>%
as.numeric()
maybe.physical <- filter(comfort.level, grepl("Maybe", Physical)) %>%
count() %>%
as.numeric()
no.physical <- filter(comfort.level, grepl("No", Physical)) %>%
count() %>%
as.numeric()
physical <- c(yes.physical, maybe.physical, no.physical)
#Creating the dataframe
comfort.level.num <- data.frame(mental, physical)
#plotting the data
ggplot(data = comfort.level) +
geom_point(mapping = aes(x=Mental, y = Physical))
})
#End Steph
data <- read.csv('./Data/mental-heath-in-tech-2016.csv')
setwd("C:/Users/Stephanie/Desktop/INFO201Assignments/info201-final-project")
data <- read.csv('./Data/mental-heath-in-tech-2016.csv')
comfort.level <- data[,11:12]
colnames(comfort.level) <- c("Mental", "Physical")
comfort.level <-  comfort.level[!(is.na(comfort.level$Mental) | comfort.level$Physical==""), ]
yes.mental <- filter(comfort.level, grepl("Yes", Mental)) %>%
count() %>%
as.numeric()
maybe.mental <- filter(comfort.level, grepl("Maybe", Mental)) %>%
count() %>%
as.numeric()
no.mental <- filter(comfort.level, grepl("No", Mental)) %>%
count() %>%
as.numeric()
mental <- c(yes.mental, maybe.mental, no.mental)
yes.physical <- filter(comfort.level, grepl("Yes", Physical)) %>%
count() %>%
as.numeric()
maybe.physical <- filter(comfort.level, grepl("Maybe", Physical)) %>%
count() %>%
as.numeric()
no.physical <- filter(comfort.level, grepl("No", Physical)) %>%
count() %>%
as.numeric()
physical <- c(yes.physical, maybe.physical, no.physical)
comfort.level.num <- data.frame(mental, physical)
ggplot(data = comfort.level.num) +
geom_point(mapping = aes(x=Mental, y = Physical))
library(ggplot2)
ggplot(data = comfort.level.num) +
geom_point(mapping = aes(x=Mental, y = Physical))
View(comfort.level.num)
ggplot(data = comfort.level.num) +
geom_point(mapping = aes(x=mental, y = physical))
View(comfort.level)
View(comfort.level.num)
View(comfort.level)
View(comfort.level.num)
responses <- data.frame(c(yes, maybe, no))
responses <- data.frame(c("yes", "maybe", "no"))
ggplot(data = comfort.level.num) +
geom_point(mapping = aes(x=mental, y = physical), color = responses) +
labs(x = "Mental", y = "Physical")
View(responses)
comfort.level.num <- data.frame(responses, mental, physical)
View(comfort.level.num)
responses <- c("yes", "maybe", "no")
comfort.level.num <- data.frame(responses, mental, physical)
output$ComfortLevel <- renderPlot({
comfort.level <- data[,11:12]
colnames(comfort.level) <- c("Mental", "Physical")
#Removing NA Values
comfort.level <-  comfort.level[!(is.na(comfort.level$Mental) | comfort.level$Physical==""), ]
#Filtering out Mental health data
yes.mental <- filter(comfort.level, grepl("Yes", Mental)) %>%
count() %>%
as.numeric()
maybe.mental <- filter(comfort.level, grepl("Maybe", Mental)) %>%
count() %>%
as.numeric()
no.mental <- filter(comfort.level, grepl("No", Mental)) %>%
count() %>%
as.numeric()
mental <- c(yes.mental, maybe.mental, no.mental)
#Filtering out Physical health data
yes.physical <- filter(comfort.level, grepl("Yes", Physical)) %>%
count() %>%
as.numeric()
maybe.physical <- filter(comfort.level, grepl("Maybe", Physical)) %>%
count() %>%
as.numeric()
no.physical <- filter(comfort.level, grepl("No", Physical)) %>%
count() %>%
as.numeric()
physical <- c(yes.physical, maybe.physical, no.physical)
#Creating the dataframe
responses <- c("yes", "maybe", "no")
comfort.level.num <- data.frame(responses, mental, physical)
#plotting the data
ggplot(data = comfort.level.num) +
geom_point(mapping = aes(x=mental, y = physical), color = responses) +
labs(x = "Mental", y = "Physical")
})
ggplot(data = comfort.level.num) +
geom_point(mapping = aes(x=mental, y = physical), color = responses) +
labs(x = "Mental", y = "Physical")
ggplot(data = comfort.level.num) +
geom_point(mapping = aes(x=mental, y = physical, color = responses)) +
labs(x = "Mental", y = "Physical")
ggplot(data = comfort.level.num) +
geom_point(mapping = aes(x=mental, y = physical, color = responses)) +
ggtitle("Number of Employees Who Feel Comfortable Discussing Mental and Physical Health Issues") +
labs(x = "Mental", y = "Physical")
ggplot(data = comfort.level.num) +
geom_point(mapping = aes(x=mental, y = physical, color = responses)) +
ggtitle("Number of Employees Who Feel Comfortable Discussing Health Issues") +
labs(x = "Mental", y = "Physical")
ggplot(data = comfort.level.num) +
geom_point(mapping = aes(x=mental, y = physical, color = responses)) +
ggtitle("Number of Employee Comfort Level Discussing Health Issues") +
labs(x = "Mental", y = "Physical", color = "Response")
responses <- c("Yes", "Maybe", "No")
comfort.level.num <- data.frame(responses, mental, physical)
ggplot(data = comfort.level.num) +
geom_point(mapping = aes(x=mental, y = physical, color = responses)) +
ggtitle("Number of Employee Comfort Level Discussing Health Issues") +
labs(x = "Mental", y = "Physical", color = "Responses")
ggplot(data = comfort.level.num) +
geom_point(mapping = aes(x=mental, y = physical, color = responses)) +
ggtitle("Employee Comfort Level Discussing Health Issues") +
labs(x = "# of Employee Comfort Level Discussing Mental Health",
y = "# of Employee Comfort Level Discussing Physical Health", color = "Responses")
ggplot(data = comfort.level.num) +
geom_point(mapping = aes(x=mental, y = physical, color = responses)) +
ggtitle("Employee Comfort Level Discussing Health Issues") +
labs(x = "# of Employee Comfort Level Discussing Mental Health",
y = "# of Employee Comfort Level Discussing Physical Health", color = "Responses") +
theme_void()
ggplot(data = comfort.level.num) +
geom_point(mapping = aes(x=mental, y = physical, color = responses)) +
ggtitle("Employee Comfort Level Discussing Health Issues") +
labs(x = "# of Employee Comfort Level Discussing Mental Health",
y = "# of Employee Comfort Level Discussing Physical Health", color = "Responses") +
theme_classic()
ggplot(data = comfort.level.num) +
geom_point(mapping = aes(x=mental, y = physical, color = responses)) +
ggtitle("Employee Opinions of the Effect of Dicussing Health Issues in the Tech Industry") +
labs(x = "Opinions on the Effect of Discussing Mental Health",
y = "Opinions on the Effect of Discussing Physical Health", color = "Responses") +
theme_classic()
ggplot(data = comfort.level.num) +
geom_point(mapping = aes(x=mental, y = physical, color = responses)) +
ggtitle("Employee Opinions of the Effect of Dicussing Health Issues in the Tech Industry") +
labs(x = "Opinions on the Effect of Discussing Mental Health",
y = "Opinions on the Effect of Discussing Physical Health", color = "Responses") +
theme_classic() +
xlim(0, 1000) +
ylim(0, 1000)
no.physical <- filter(comfort.level, grepl("No", Physical))
View(no.physical)
View(comfort.level)
ggpplot(data = comfort.level) +
geom_point(mapping = aes(x = mental, y = physical))
ggplot(data = comfort.level) +
geom_point(mapping = aes(x = mental, y = physical))
ggplot(data = comfort.level) +
geom_point(mapping = aes(x = mental))
View(comfort.level)
ggplot(data = comfort.level) +
geom_point(mapping = aes(x = Mental))
ggplot(data = comfort.level) +
geom_point(mapping = aes(x = Mental, y = Physical))
runApp()
ggplot(data = comfort.level.num) +
geom_point(mapping = aes(x=mental, y = physical, color = responses)) +
ggtitle("Employee Opinions of the Effect of Dicussing Health Issues in the Tech Industry") +
labs(x = "Opinions on the Effect of Discussing Mental Health",
y = "Opinions on the Effect of Discussing Physical Health", color = "Responses") +
theme_classic() +
xlim(0, 1000) +
ylim(0, 1000)
runApp()
ggplot(data = comfort.level.num) +
geom_point(mapping = aes(x=mental, y = physical, color = responses), size = 3) +
ggtitle("Employee Opinions of the Effect of Dicussing Health Issues in the Tech Industry") +
labs(x = "Opinions on the Effect of Discussing Mental Health",
y = "Opinions on the Effect of Discussing Physical Health", color = "Responses") +
theme_classic() +
xlim(0, 1000) +
ylim(0, 1000)
runApp()
ggplot(data = comfort.level.num) +
geom_point(mapping = aes(x=mental, y = physical, color = responses), size = 3) +
ggtitle("Do you think that discussing this health issue will have negative consequences?") +
labs(x = "Opinions on the Effect of Discussing Mental Health",
y = "Opinions on the Effect of Discussing Physical Health", color = "Responses") +
theme_classic() +
xlim(0, 1000) +
ylim(0, 1000)
ggplot(data = comfort.level.num) +
geom_point(mapping = aes(x=mental, y = physical, color = responses), size = 3) +
ggtitle("Do you think that discussing this health issue will have negative consequences?") +
labs(x = "Mental Health",
y = "Physical Health", color = "Responses") +
theme_classic() +
xlim(0, 1000) +
ylim(0, 1000)
shinyUI(navbarPage('Final Project',
tabPanel('Introduction',
titlePanel('Introduction'),
mainPanel(
p(paste0("The dataset we will be working with is âOSMI Mental Health in Tech Survey 2016â ",
"and is sourced from Kaggle (https://www.kaggle.com/osmi/mental-health-in-tech-2016).",
" This dataset includes survey results for a survey completed by Open Sourcing Mental ",
"Illness addressing attitudes toward mental illnesses in the tech industry. The target ",
"audience of this data is supervisors or managers at tech companies. By analyzing this ",
"data, we can give supervisors and managers insight into the stigma surrounding mental ",
"illness in their industry, allowing them to make positive changes. The audience ",
"will get deeper insight into the perceptions of mental illness in their workplace,",
" including comfort level addressing supervisors, the effect of addressing mental ",
"illness on career, and if any measures taken have changed their perception on ",
"addressing mental illness."))
)
),
# Create a tab panel for your map
tabPanel('Steph',
titlePanel('Title 1'),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
checkboxGroupInput(inputId = "impact", label = "Impact",
choices = c("Negative Consequences", "Comfort Level Discussing Health"))
),
# Main panel: display plotly map
mainPanel(
plotOutput("ComfortLevel")
)
)
),
tabPanel('Megha',
titlePanel('Title 1'),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
),
# Main panel: display plotly map
mainPanel(
)
)
),
tabPanel('Kathy',
titlePanel('Title 1'),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
),
# Main panel: display plotly map
mainPanel(
)
)
),
tabPanel('Cindy',
titlePanel('Title 1'),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
),
# Main panel: display plotly map
mainPanel(
)
)
),
tabPanel('Zoheb',
titlePanel('Title 1'),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
),
# Main panel: display plotly map
mainPanel(
)
)
)
))
runApp()
View(data)
runApp()
negative.consequences <- function(data.input) {
ggplot(data = data.input) +
geom_point(mapping = aes(x=mental, y = physical, color = responses), size = 3) +
ggtitle("Do you think that discussing this health issue will have negative consequences?") +
labs(x = "Mental Health",
y = "Physical Health", color = "Responses") +
theme_classic() +
xlim(0, 1000) +
ylim(0, 1000)
}
runApp()
runApp()
runApp()
runApp()
text <- function(data.input) {
comfort.level <- data.input[,11:12]
colnames(comfort.level) <- c("Mental", "Physical")
#Removing NA Values
comfort.level <-  comfort.level[!(is.na(comfort.level$Mental) | comfort.level$Physical==""), ]
#Filtering out Mental health data and counting it
yes.mental <- filter(comfort.level, grepl("Yes", Mental)) %>%
count() %>%
as.numeric()
maybe.mental <- filter(comfort.level, grepl("Maybe", Mental)) %>%
count() %>%
as.numeric()
no.mental <- filter(comfort.level, grepl("No", Mental)) %>%
count() %>%
as.numeric()
mental.impact <- c(yes.mental, maybe.mental, no.mental)
#Filtering out Physical health data and counting it.
yes.physical <- filter(comfort.level, grepl("Yes", Physical)) %>%
count() %>%
as.numeric()
maybe.physical <- filter(comfort.level, grepl("Maybe", Physical)) %>%
count() %>%
as.numeric()
no.physical <- filter(comfort.level, grepl("No", Physical)) %>%
count() %>%
as.numeric()
physical.impact <- c(yes.physical, maybe.physical, no.physical)
#Creating the dataframe
responses <- c("Yes", "Maybe", "No")
comfort.level.num <- data.frame(responses, mental, physical)
return(comfort.level.num)
}
test(data)
test <- text(data)
View(test)
text <- function(data.input) {
comfort.level <- data.input
colnames(comfort.level) <- c("Mental", "Physical")
#Removing NA Values
comfort.level <-  comfort.level[!(is.na(comfort.level$Mental) | comfort.level$Physical==""), ]
#Filtering out Mental health data and counting it
yes.mental <- filter(comfort.level, grepl("Yes", Mental)) %>%
count() %>%
as.numeric()
maybe.mental <- filter(comfort.level, grepl("Maybe", Mental)) %>%
count() %>%
as.numeric()
no.mental <- filter(comfort.level, grepl("No", Mental)) %>%
count() %>%
as.numeric()
mental.impact <- c(yes.mental, maybe.mental, no.mental)
#Filtering out Physical health data and counting it.
yes.physical <- filter(comfort.level, grepl("Yes", Physical)) %>%
count() %>%
as.numeric()
maybe.physical <- filter(comfort.level, grepl("Maybe", Physical)) %>%
count() %>%
as.numeric()
no.physical <- filter(comfort.level, grepl("No", Physical)) %>%
count() %>%
as.numeric()
physical.impact <- c(yes.physical, maybe.physical, no.physical)
#Creating the dataframe
responses <- c("Yes", "Maybe", "No")
comfort.level.num <- data.frame(responses, mental, physical)
return(comfort.level.num)
}
comfort.level.num <- text(comfort.level)
View(comfort.level.num)
count.responses <- function(data.input) {
comfort.level <- data.input
colnames(comfort.level) <- c("Mental", "Physical")
#Removing NA Values
comfort.level <-  comfort.level[!(is.na(comfort.level$Mental) | comfort.level$Physical==""), ]
#Filtering out Mental health data and counting it
yes.mental <- filter(comfort.level, grepl("Yes", Mental)) %>%
count() %>%
as.numeric()
maybe.mental <- filter(comfort.level, grepl("Maybe", Mental)) %>%
count() %>%
as.numeric()
no.mental <- filter(comfort.level, grepl("No", Mental)) %>%
count() %>%
as.numeric()
mental.impact <- c(yes.mental, maybe.mental, no.mental)
#Filtering out Physical health data and counting it.
yes.physical <- filter(comfort.level, grepl("Yes", Physical)) %>%
count() %>%
as.numeric()
maybe.physical <- filter(comfort.level, grepl("Maybe", Physical)) %>%
count() %>%
as.numeric()
no.physical <- filter(comfort.level, grepl("No", Physical)) %>%
count() %>%
as.numeric()

      
      physical.impact <- c(yes.physical, maybe.physical, no.physical)
      
      #Creating the dataframe
      responses <- c("Yes", "Maybe", "No")
      data.final <- data.frame(responses, mental, physical)
      return(data.final)
    }
    
    impact.level <- data[,11:12]
    impact.level.num <- count.responses(impact.level)
    
    #Creating functions for each plot
    negative.impact <- function(data.input) {
      ggplot(data = data.input) + 
        geom_bar(mapping = aes(x=mental, y = physical, color = responses), size = 3) +
        ggtitle("Do you think that discussing this health issue will have negative consequences?") +
        labs(x = "Mental Health",
             y = "Physical Health", color = "Responses") +
        theme_classic() +
        xlim(0, 1000) +
        ylim(0, 1000)
    }
    
    interview <- data.frame(data[,41], data[,39])
    interview.num <- count.responses(interview)
    
    #plotting the data
        if(input$impact == "Negative Impact") {  
          ggplot(data = impact.level.num) + 
            geom_point(mapping = aes(x=mental, y = physical, color = responses), size = 3) +
            ggtitle("Do you think that discussing this health issue will have negative consequences?") +
            labs(x = "Mental Health",
                 y = "Physical Health", color = "Responses") +
            theme_classic() +
            xlim(0, 1000) +
            ylim(0, 1000)
        } else if (input$impact == "Comfort Level Discussing Health") {
          ggplot(data = interview.num) +
            geom_point(mapping = aes(x=mental, y = physical, color = responses), size = 3) +
            ggtitle("Do you think that discussing this health issue will have negative consequences?") +
            labs(x = "Mental Health",
                 y = "Physical Health", color = "Responses") +
            theme_classic() +
            xlim(0, 1000) +
            ylim(0, 1000)
          
        }  else {}

    
  })
  #End Steph
  
  #Cindy
  output$PlotName <- renderPlot({
    
  })
  #End Cindy
  
  #Megha
  output$plotname <- renderPlot({
    
  })
  #End Megha
  
  #Kathy
  output$plotname <- renderPlot({
    
  })
  #End Kathy
  
  #Zoheb
  output$plotname <- renderPlot({
    
  })
  #End Zoheb
  
})
>>>>>>> efcda9bf439ebadf40a6626a320daafbe7fbe2e0
