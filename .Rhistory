marbles <- c('red', 'yellow', 'blue', 'green', 'orange', 'purple')
sample(marbles, 1, replace = null, prob = null)
sample(marbles, 1, replace = FALSE, prob = NULL)
MarbleGame <- function(guess) {
if (guess = sample(marbles, 1, replace = FALSE, prob = NULL)) {
return("You guessed right")
} else {
return("You guessed wrong")
}
}
MarbleGame <- function(guess) {
picked <- sample(marbles, 1, replace = FALSE, prob = NULL)
if (guess = picked) {
return("You guessed right")
} else {
return("You guessed wrong")
}
}
marbles <- c('red', 'yellow', 'blue', 'green', 'orange', 'purple')
# Use the `sample` function to select a single marble
sample(marbles, 1, replace = FALSE, prob = NULL)
# Write a function MarbleGame that does the following:
# - Takes in a `guess` of a marble color
# - Randomly samples a marble
# - Returns whether or not the person guessed accurately (preferrably a full phrase)
MarbleGame <- function(guess) {
picked <- sample(marbles, 1, replace = FALSE, prob = NULL)
if (guess = picked) {
return("You guessed right")
} else {
return("You guessed wrong")
}
}
MarbleGame <- function(guess) {
}
MarbleGame <- function(guess) {
picked = sample(marbles, 1, replace = FALSE, prob = NULL)
}
MarbleGame <- function(guess) {
picked = sample(marbles, 1, replace = FALSE, prob = NULL)
if (picked == guess) {
return("You guess right")
}
}
MarbleGame <- function(guess) {
picked = sample(marbles, 1, replace = FALSE, prob = NULL)
if (picked == guess) {
return("You guess right")
} else {
return("You guess wrong")
}
}
MarbleGame <- function(guess) {
picked = sample(marbles, 1, replace = FALSE, prob = NULL)
if (picked == guess) {
return(paste("Your guess was right. The color was ", picked))
} else {
return(paste("Your guess was wrong. The color was ", picked))
}
}
MarbleGame(red)
MarbleGame("red")
MarbleGame <- function(guess) {
picked = sample(marbles, 1, replace = FALSE, prob = NULL)
if (picked == guess) {
return(paste("Your guess was right. The color was", picked))
} else {
return(paste("Your guess was wrong. The color was", picked))
}
}
install.packages(stringr)
install.packages("stringr")
install.packages('devtools')
devtools::install_github("hadley/fueleconomy")
breakfast <- c('milk', 'cornflakes')
lunch <- c('dumplings', 'orange juice', 'strawberry')
meals <-list(breakfast, lunch)
?? list
meals[[length(meals) + 1]] <- dinner
meals[[length(meals) + 1]] <- (dinner <- c('sandwich'))
append(meals, dinner <- c('sandwich'), length(meals + 1))
append(meals, dinner = c('sandwich'), length(meals + 1))
meals$dinner <- c('sandwich', 'soup', 'water')
dinner <- meals$dinner
meals[[length(meals) + 1]] <- (meals[['lunch']])
early.meals <- meals[1:2]
my.age <- 19
my.name <- 'Kathy'
minutes.in.a.day <- 24 * 60
hours.in.a.year <- 24 * 365
more.minutes.than.hours <- minutes.in.a.day > hours.in.a.year
MakeIntroduction <- function(name, age) {
return(paste("Hello, my name is", my.name, ", and I'm", my.age, "years old"))
}
MakeIntroduction <- function(name, age) {
return(paste("Hello, my name is", name, ", and I'm", age, "years old"))
}
my.intro <- MakeIntroduction(my.name, my.age)
loud.intro <- toupper(my.intro)
quiet.intro <- tolower(my.intro)
causual.intro <- str_replace(my.intro, "Hello, my name is", "Hey, I'm")
employees <- c(paste("Employee", (1:100)))
salaries.2014 <- runif(100, 40000, 50000)
salaries.2014 <- runif(100, 50000, 100000)
salaries.2015 <- salaries.2014 + 10000
salaries <- data.frame(employees, salaries.2014, salaries.2015)
salaries
salaries$raise <- abs(salaries.2014 - salaries.2015)
salaries
salaries.2015 <- runif(salaries.2014 + 10000)
salaries
salaries.2015 <- runif(100, 50000, 110000)
salaries
salaries.2015 <- runif(100, 40000, 110000)
salaries
salaries$raise <- salaries.2014 - salaries.2015
salaries$raise <- salaries.2015 - salaries.2014
salaries
ls
salaries$raise <- salaries$salaries.2015 - salaries$salaries.2014
salaries
salaries$got.raise <- return(salaries$raise > 0)
salaries$got.raise <- (salaries$raise > 0)
status
salaries
salaries$57
as.Date('August-7-1997')
as.Date('1997-8-7')
shooting.data.df <- read.csv("./data/shootings-2016.csv")
library(dplyr)
View(shooting.data.df)
shootings.occured <- nrow(shooting.data.df)
num.killed <- shooting.data.df %>% select(killed) %>% summarise(sum())
View(num.killed)
num.killed <- shooting.data.df %>% select(killed) %>% sum()
city.occur <- select(shooting.data.df, city) %>% unlist()
city.occur
city.occur <- select(shooting.data.df, city) %>% list()
city.occur <- select(shooting.data.df, city) %>% combine()
city.occur
days.occur <- select(shooting.data.df, date) %>% unique()
View(days.occur)
days.occur <- select(shooting.data.df, date) %>% unique() %>% nrow()
install.packages("ggplot2")
library(ggplot2)
library(dplyr)
?diamonds
View(diamonds)
diamonds %>% colnames()
diamonds %>% nrow()
diamonds.sample.df <- sample_n(diamonds, 1000)
diamonds.sample <- sample_n(diamonds, 1000)
diamonds.sample <- sample_n(diamonds, 1000)
ggplot(diamonds.sample)
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = carat, y = price))
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = carat, y = price, palette = clarity)
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = carat, y = price, palette = clarity))
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = price, y = carat, color = blue))
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = price, y = carat, color = "blue"))
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = price, y = carat, color = "red"))
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = price, y = carat, color = 0000FF))
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = price, y = carat, color = "0000FF"))
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = price, y = carat, color = "#0000FF"))
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = price, y = carat))
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = price, y = carat, color = colors(blue)))
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = price, y = carat, color = colors(blue)))
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = price, y = carat, color = colors("blue")))
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = price, y = carat), color = "blue")
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = price, y = carat, shape = cut))
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = cut, y = carat, size = price))
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = cut, y = carat, size = price, color = price))
ggplot(data = diamonds.sample) +
geom_line(mapping = aes(x = carat, y = price, color = carat))
ggplot(data = diamonds.sample) +
geom_smooth(mapping = aes(x = carat, y = price, color = carat))
ggplot(data = diamonds.sample) +
geom_bar(mapping = aes(x = cut, y = price, color = carat))
ggplot(data = diamonds.sample) +
geom_bar(mapping = aes(x = cut, y = price))
ggplot(data = diamonds.sample) +
geom_bar(mapping = aes(x = cut))
ggplot(data = diamonds.sample) +
geom_bar(mapping = aes(x = cut, color = clarity))
ggplot(data = diamonds.sample) +
geom_bar(mapping = aes(x = cut, fill = clarity))
ggplot(data = diamonds.sample) +
geom_histogram(mapping = aes(y = clarity))
ggplot(data = diamonds.sample) +
geom_histogram(mapping = aes(clarity))
ggplot(data = diamonds.sample) +
geom_histogram(mapping = aes(x = price, y = clarity))
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = carat, y = price), opacity = 0.20)
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = carat, y = price), alpha = 0.20)
ggplot(data = diamonds.sample) +
geom_histogram(mapping = aes(x = price, fill = clarity))
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = carat, y = price), alpha = 0.01)
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = carat, y = price), alpha = 0.1)
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(x = price, y = carat, shape = cut, color = cut))
ggplot(data = diamonds.sample) +
geom_smooth(mapping = aes(x = carat, y = price, color = carat))
ggplot(data = diamonds.sample) +
geom_line(mapping = aes(x = carat, y = price, color = carat))
ggplot(data = diamonds.sample) +
geom_line(mapping = aes(x = carat, y = price, color = cut))
ggplot(data = diamonds.sample) +
geom_smooth(mapping = aes(x = carat, y = price, color = cut))
library(ggplot2)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
?diamonds
ggplot(data = diamonds) +
stat_count(mapping = aes(x = cut))
ggplot(data = diamonds) +
stat_summary(mapping = aes(x = cut, y = depth))
ggplot(data = diamonds) +
stat_summary(mapping = aes(x = cut, y = depth),
fun.ymin = min, fun.ymax = max, fun.y = median)
ggplot(diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity))
ggplot(diamonds) +
geom_bar(mapping = aes(x = cut, fill = y))
ggplot(diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity), position = fill)
ggplot(diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity), position = "fill")
ggplot(diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity), position = "dodge")
library(dplyr)
survey.df <- read.csv("./../Data/mental-heath-in-tech-2016.csv")
data <- read.csv('./Data/mental-heath-in-tech-2016.csv')
setwd("C:/Users/dodo/Desktop/info201/info201-final-project")
data <- read.csv('./Data/mental-heath-in-tech-2016.csv')
View(data)
View(data)
