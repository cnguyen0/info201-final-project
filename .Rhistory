base.url.committees <- 'https://congress.api.sunlightfoundation.com/committees'
query.params.committees <- list(member_ids = rep.id)
response.committees <- GET(base.url.committees, query = query.params.committees)
body.committees <- content(response.committees, "text")
results.committees <- fromJSON(body.committees)
flattened.committees <- flatten(results.committees$results) %>%
select(chamber, committee_id, name, subcommittee, parent_committee_id) %>%
mutate(bioguide_id = rep.id)
return (flattened.committees)
}
combined.rep.committees <- do.call("rbind", get.reps.committees) %>%
left_join(flattened.legislators, by = 'bioguide_id') %>%
select(name, bioguide_id, first_name, last_name)
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(jsonlite)
library(httr)
library(knitr)
combined.rep.committees <- do.call("rbind", get.reps.committees)
get.reps.committees <- lapply(get.reps$bioguide_id, FUN=GetCommittees) # returns a list/vector of the dataframe that are actually lists
library(dplyr)
library(jsonlite)
library(httr)
library(knitr)
my.zip <- 98105L
base.url.district <- 'https://congress.api.sunlightfoundation.com/districts/locate'
query.params.district <- list(zip = my.zip)
response.district <- GET(base.url.district, query = query.params.district)
body.district <- content(response.district, "text")
results.district <- fromJSON(body.district)
flattened.district <- flatten(results.district$results)
my.district <- flattened.district$district[[1]]
# part 2
base.url.legislators <- 'https://congress.api.sunlightfoundation.com/legislators/locate'
query.params.legislators <- list(zip = my.zip)
response.legislators <- GET(base.url.legislators, query = query.params.legislators)
body.legislators <- content(response.legislators, "text")
results.legislators <- fromJSON(body.legislators)
flattened.legislators <- flatten(results.legislators$results) %>%
select(first_name, last_name, title, party, chamber, phone, website, twitter_id)
legislators.table <- kable(flattened.legislators, col.names = c('First Name', 'Last Name', 'Title', 'Party', 'Chamber', 'Phone', 'Website', 'Twitter'))
# part 3
GetCommittees <- function(rep.id) {
base.url.committees <- 'https://congress.api.sunlightfoundation.com/committees'
query.params.committees <- list(member_ids = rep.id)
response.committees <- GET(base.url.committees, query = query.params.committees)
body.committees <- content(response.committees, "text")
results.committees <- fromJSON(body.committees)
flattened.committees <- flatten(results.committees$results) %>%
select(chamber, committee_id, name, subcommittee, parent_committee_id) %>%
mutate(bioguide_id = rep.id)
return (flattened.committees)
}
# dataframe of reps
get.reps <- flatten(results.legislators$results)
# a list of dataframe, each containing the committee per rep.
get.reps.committees <- lapply(get.reps$bioguide_id, FUN=GetCommittees) # returns a list/vector of the dataframe that are actually lists
# combining into one dataframe and joining
combined.rep.committees <- do.call("rbind", get.reps.committees)
joined.rep.committees <- left_join(combined.rep.committees, flattened.legislators, by = 'bioguide_id') %>%
select(name, bioguide_id, first_name, last_name)
flattened.legislators
get.reps <- flatten(results.legislators$results)
# a list of dataframe, each containing the committee per rep.
get.reps.committees <- lapply(get.reps$bioguide_id, FUN=GetCommittees) # returns a list/vector of the dataframe that are actually lists
# combining into one dataframe and joining
combined.rep.committees <- do.call("rbind", get.reps.committees) %>%
left_join(combined.rep.committees, get.reps, by = 'bioguide_id') %>%
select(name, bioguide_id, first_name, last_name)
get.reps <- flatten(results.legislators$results)
# a list of dataframe, each containing the committee per rep.
get.reps.committees <- lapply(get.reps$bioguide_id, FUN=GetCommittees) # returns a list/vector of the dataframe that are actually lists
# combining into one dataframe and joining
combined.rep.committees <- do.call("rbind", get.reps.committees) %>%
left_join(get.reps, by = 'bioguide_id') %>%
select(name, bioguide_id, first_name, last_name)
tests <- plot(barplot(counts, main="Committees Served on by Each Rep.", horiz=TRUE, xlab = '# Committees'))
counts <- table(responseName = paste(combined.rep.committees$first_name, combined.rep.committees$last_name)) %>% sort()
tests <- plot(barplot(counts, main="Committees Served on by Each Rep.", horiz=TRUE, xlab = '# Committees'))
tests <- barplot(counts, main="Committees Served on by Each Rep.", horiz=TRUE, xlab = '# Committees')
tests
par(mfrow = ncol(counts))
ncol(counts)
count(counts)
par(mfrow = unique(combined.rep.committees$bioguide_id) %>% count())
par(mfrow = count(unique(combined.rep.committees$bioguide_id)))
tests <- barplot(counts, main="Committees Served on by Each Rep.", horiz=TRUE, xlab = '# Committees')
par(mfrow = 3)
par(mfrow=c(3, 16))
par(mfrow=c(3, 15))
par(mar=c(10, 10, 10, 10))
par(mar=c(5, 5, 5, 5))
par(mar=c(8, 8, 8, 8))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(jsonlite)
library(httr)
library(knitr)
website.links <- paste0("<a href='", flattened.legislators$website, "'> link </a>")
twitter.links <- paste0("<a href='https://twitter.com/", flattened.legislators$twitter_id, "'> link </a>")
my.zip <- 98105L
base.url.district <- 'https://congress.api.sunlightfoundation.com/districts/locate'
query.params.district <- list(zip = my.zip)
response.district <- GET(base.url.district, query = query.params.district)
body.district <- content(response.district, "text")
results.district <- fromJSON(body.district)
flattened.district <- flatten(results.district$results)
my.district <- flattened.district$district[[1]]
# part 2
base.url.legislators <- 'https://congress.api.sunlightfoundation.com/legislators/locate'
query.params.legislators <- list(zip = my.zip)
response.legislators <- GET(base.url.legislators, query = query.params.legislators)
body.legislators <- content(response.legislators, "text")
results.legislators <- fromJSON(body.legislators)
flattened.legislators <- flatten(results.legislators$results) %>%
select(first_name, last_name, title, party, chamber, phone, website, twitter_id)
flattened.legislators$website <- paste0("<a href='", flattened.legislators$website, "'> link </a>")
flattened.legislators$twitter_id <- paste0("<a href='https://twitter.com/", flattened.legislators$twitter_id, "'> link </a>")
legislators.table <- kable(flattened.legislators, col.names = c('First Name', 'Last Name', 'Title', 'Party', 'Chamber', 'Phone', 'Website', 'Twitter'))
library(ggplot2)
library(dplyr)
View(diamonds)
sample_n(diamonds)
diamonds.sample <- sample_n(diamonds)
diamonds.sample <- sample_n(diamonds, 1000)
View(diamonds.sample)
ggplot(data = diamonds.sample)
ggplot(data = diamonds.sample$price)
ggplot(data = diamonds.sample) +   geom_point(mapping = aes(x = carat, y = price))
ggplot(data = diamonds.sample) +   geom_point(mapping = aes(x = carat, y = price, color = clarity))
ggplot(data = diamonds) +   geom_point(mapping = aes(x = carat, y = price, color = clarity))
ggplot(data = diamonds.sample) + geom_point(mapping = aes(x = carat, y = price, color = 'blue'))
ggplot(data = diamonds.sample) + geom_point(mapping = aes(x = carat, y = price, colour = 'blue'))
ggplot(data = diamonds.sample) + geom_point(colour = 'blue', mapping = aes(x = carat, y = price))
ggplot(data = diamonds.sample) + geom_point(aes(shape = cut), mapping = aes(x = carat, y = price))
ggplot(data = diamonds.sample) + geom_point(aes(shape = factor(cut)), mapping = aes(x = carat, y = price))
ggplot(data = diamonds.sample) + geom_point(aes(x = carat, y = price, shape=cut))
ggplot(data = diamonds.sample) + geom_point(aes(x = carat, y = cut, size=price))
ggplot(data = diamonds.sample) + geom_point(aes(x = carat, y = cut, size=price, color=price))
ggplot(data = diamonds.sample) + geom_line(aes(x = carat, y = cut, color=price))
ggplot(data = diamonds.sample) + geom_line(mapping = aes(x = carat, y = cut, color=price))
ggplot(data = diamonds.sample) + geom_point(mapping = aes(x = carat, y = cut, size=price, color=price))
ggplot(data = diamonds.sample) + geom_line(mapping = aes(x = carat, y = cut, color=price))
ggplot(data = diamonds.sample) + geom_line(mapping = aes(x = carat, y = carat, color=price))
ggplot(data = diamonds.sample) + geom_line(mapping = aes(x = carat, y = price, color=carat))
ggplot(data = diamonds.sample) + geom_smooth(mapping = aes(x = carat, y = price, color=carat))
ggplot(data = diamonds.sample) + geom_bar(mapping = aes(x = cut, y = price, color=carat))
ggplot(data = diamonds.sample) + geom_bar(mapping = aes(x = cut, y = price))
ggplot(data = diamonds.sample) + geom_bar(mapping = aes(x = cut))
library(ggplot2)
ggplot(data = mpg) + geom_bar(mapping = aes(x = cut), stat="count")
ggplot(data = mpg) + geom_bar(mapping = aes(x = cut))
ggplot(data = mpg) + geom_bar(mapping = aes(x = cut), stat="count")
ggplot(data = mpg) + geom_bar(aes(x = cut), stat="count")
ggplot(data = diamonds) + geom_bar(aes(x = cut), stat="count")
ggplot(data = diamonds) + stat_count(mapping = aes(x=cut))
ggplot(data = diamonds) + stat_summary(mapping = aes(x = cut, y = depth))
ggplot(data = diamonds) + stat_summary(mapping = aes(x = cut, y = depth), fun.ymin = min, fun.ymax = max, fun.y = median)
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut), filling = clarity)
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity))
grouped.dates <- shooting.data %>% group_by(date)
library(dplyr)
library(knitr)
library(ggplot2)
library(plotly)
grouped.dates <- shooting.data %>% group_by(date)
shooting.data <- read.csv('./data/shootings-2016.csv')
grouped.dates <- shooting.data %>% group_by(date)
grouped.dates
grouped.dates <- shooting.data %>% mutate(total = (injured + killed)) %>% group_by(date)
grouped.dates
grouped.dates <- shooting.data %>% mutate(total = (injured + killed)) %>% group_by(date) %>%
aggregate(grouped.dates[,'total'], by=list(grouped.dates$state), "sum")
grouped.dates <- shooting.data %>% mutate(total = (injured + killed)) %>% group_by(date)
sum.groups <- aggregate(grouped.dates[,'total'], by=list(grouped.dates$state), "sum")
sum.groups
sum.groups <- aggregate(grouped.dates[,'total'], by=list(grouped.dates$dates), "sum")
sum.groups <- aggregate(grouped.dates[,'total'], by=list(grouped.dates$date), "sum")
sum.groups
sum.groups[1]
sum.groups[1,1]
typeof(sum.groups[1,1])
sum.groups.month
sum.groups[1,1].month
sum.groups[1,1].m
sum.groups[1,1].mon
sum.groups[1,1] == 'April 10, 2016'
sum.groups[1,1] == '04/10/2016'
sum.groups[1,1] == '04/10/16'
sum.groups[1,1] == 'April'
sum.groups[1,1].month
sum.groups[1,1][month]
?as.date
?as.Date
as.Date(sum.groups[1,1])
as.Date(sum.groups[1,1], "%Y-%m-%d")
as.Date(sum.groups[1,1], "%m/%d/%Y")
shooting.data[1,1]
is.Date(sum.groups[1,1])
is.date(sum.groups[1,1])
is.date(as.character(sum.groups[1,1]), "%m/%d/%Y")
as.Date(as.character(sum.groups[1,1]), "%m/%d/%Y")
p <- plot_ly(data = sum.groups, x = ~sum.groups$date, y = ~sum.groups$total)
p
library(plotly)
p <- plot_ly(data = sum.groups, x = ~sum.groups$date, y = ~sum.groups$total)
p
p <- plot_ly(data = sum.groups, x = ~sum.groups$date, y = ~sum.groups$total, type = 'scatter', mode = 'markers' )
p
p <- plot_ly(data = sum.groups, x = ~date, y = ~total, type = 'scatter', mode = 'markers' )
p
sum.groups <- aggregate(grouped.dates[,'total'], by=list(grouped.dates$date), "sum")
sum.groups
p <- plot_ly(data = sum.groups, x = ~date, y = ~total, type = 'scatter', mode = 'markers' )
p
p <- plot_ly(data = sum.groups, x = sum.groups$date, y = ~total, type = 'scatter', mode = 'markers' )
p
sum.groups$date
p <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'markers' )
p
par(mar=c(8, 8, 8, 8))
p <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'markers' )
p
par(mar=c(10, 10, 10, 10))
plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'markers' )
build <- plotly_build(p)
str(p)
p$layout$margin$b <- 220
p
p$layout$margin$b <- 1000
p
p <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'markers' ) %>%
layout(xaxis = list(tickangle = 45))
p
p <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'markers' ) %>%
layout(margin = list(b = 160), xaxis = list(tickangle = 45))
p
p <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'markers' ) %>%
layout(margin = list(b = 160, r = 50), xaxis = list(tickangle = 45))
p
p <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', marker = list(size = 10,
color = 'rgba(255, 182, 193, .9)',
line = list(color = 'rgba(152, 0, 0, .8)',
width = 2))) %>%
layout(margin = list(b = 160, r = 50), xaxis = list(tickangle = 45))
p
p <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'marker', marker = list(size = 10,
color = 'rgba(255, 182, 193, .9)',
line = list(color = 'rgba(152, 0, 0, .8)',
width = 2))) %>%
layout(margin = list(b = 160, r = 50), xaxis = list(tickangle = 45))
p
p <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'marker', marker = list(size = 10,
color = 'rgba(255, 182, 193, .9)')) %>%
layout(margin = list(b = 160, r = 50), xaxis = list(tickangle = 45))
p
p <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'marker', marker = list(size = 10,
color = 'rgba(255, 182, 193, 1)')) %>%
layout(margin = list(b = 160, r = 50), xaxis = list(tickangle = 45))
p
p <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'marker', marker = list(size = 10,
color = 'rgba(255, 182, 193)')) %>%
layout(margin = list(b = 160, r = 50), xaxis = list(tickangle = 45))
p
p <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'marker', marker = list(size = 10,
color = 'rgba(255, 182, 193, 1.0)')) %>%
layout(margin = list(b = 160, r = 50), xaxis = list(tickangle = 45))
p
p <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'marker', marker = list(size = 10,
color = ~total) %>%
layout(margin = list(b = 160, r = 50), xaxis = list(tickangle = 45))
p
p
p <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'marker', marker = list(size = 10,
color = ~total) %>%
layout(margin = list(b = 160, r = 50), xaxis = list(tickangle = 45))
p
p <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'marker', marker = list(size = 10,
color = ~total) %>% layout(margin = list(b = 160, r = 50), xaxis = list(tickangle = 45))
p <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'marker',
p <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'marker',
marker = list(size = 10, color = ~total) %>%
layout(margin = list(b = 160, r = 50), xaxis = list(tickangle = 45)))
p <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'marker',
marker = list(size = 10, color = ~total)) %>%
layout(margin = list(b = 160, r = 50), xaxis = list(tickangle = 45))
p
p <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'marker',
marker = list(size = 10, color = ~total)) %>%
layout(margin = list(b = 160, r = 50), xaxis = list(title = 'Dates', tickangle = 45))
p
p <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'marker',
marker = list(size = 10, color = ~total)) %>%
layout(margin = list(b = 160, r = 50), xaxis = list(title = 'Dates', tickangle = 45),
yaxis = list(title = 'Total Casualties'))
p
dates.casualties <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'marker',
marker = list(size = 10, color = ~total)) %>%
layout(margin = list(b = 160, r = 50), xaxis = list(title = 'Dates', tickangle = 45),
yaxis = list(title = 'Total Casualties'))
as.Dates(sum.groups[1,1], '%B %d, %y')
as.Date(sum.groups[1,1], '%B %d, %y')
sum.groups[1,1]
as.Date(sum.groups$Group.1, '%B %d, %y')
sum.groups$Group.1 <- as.Date(sum.groups$Group.1, '%B %d, %y')
sum.groups
test <- aggregate(grouped.dates[,'total'], by=list(grouped.dates$date), "sum")
test <- mutate(month = format(date, "%m")) %>% aggregate(grouped.dates[,'total'], by=list(grouped.dates$month), "sum")
test <- mutate(month = format(date, "%m"))
test <- grouped.dates %>% mutate(month = format(date, "%m"))
test <- sum.groups %>% mutate(month = format(date, "%m"))
test <- sum.groups %>% mutate(month = format(Group.1, "%m"))
test
test <- sum.groups %>% mutate(month = format(Group.1, "%m")) %>% aggregate(grouped.dates[,'total'], by=list(grouped.dates$month), "sum")
test <- sum.groups %>% mutate(month = format(Group.1, "%m")) %>% aggregate(sum.groups[,'total'], by=list(sum.groups$month), "sum")
test2 <- aggregate(sum.groups[,'total'], by=list(sum.groups$month), "sum")
test2 <- aggregate(test[,'total'], by=list(test$month), "sum")
test2
sum.groups <- aggregate(grouped.dates[,'total'], by=list(grouped.dates$date), "sum")
sum.groups
sum.groups <- aggregate(grouped.dates[,'total'], by=list(grouped.dates$date), "sum") %>% mutate(month = format(Group.1, "%m"))
sum.groups <- aggregate(grouped.dates[,'total'], by=list(grouped.dates$date), "sum") %>% mutate(month = format(date, "%m"))
sum.groups <- mutate(month = format(Group.1, "%m"))
sum.groups <- sum.groups %>% mutate(month = format(Group.1, "%m"))
sum.groups
typeof(sum.groups[1,1])
grouped.dates$date <- as.Date(grouped.dates$date, '%B %d, %y') # converting characters into Date objects
sum.groups <- aggregate(grouped.dates[,'total'], by=list(grouped.dates$date), "sum")
sum.groups <- sum.groups %>% mutate(month = format(Group.1, "%m"))
sum.groups
sum.groups <- sum.groups %>% mutate(month = format(Group.1, "%m")) %>% select(month, total)
sum.groups
grouped.dates$date <- as.Date(grouped.dates$date, '%B %d, %y') mutate(month = format(date, "%m")) %>% select(month, total)
grouped.dates$date <- as.Date(grouped.dates$date, '%B %d, %y') %>% mutate(month = format(date, "%m")) %>% select(month, total)
grouped.dates <- mutate(month = format(date, "%m")) %>% select(month, total)
grouped.dates <- grouped.dates %>% mutate(month = format(date, "%m")) %>% select(month, total)
grouped.dates
grouped.dates <- grouped.dates %>% mutate(month = format(date, "%m")) %>% select(month, total)
grouped.dates <- grouped.dates %>% mutate(month = format(date, "%m"))
grouped.dates$date <- as.Date(grouped.dates$date, '%B %d, 2016')
grouped.dates <- grouped.dates %>% mutate(month = format(date, "%m"))
grouped.dates
grouped.dates$date <- as.Date(grouped.dates$date, '%B %d, %y')
grouped.dates
grouped.dates <- grouped.dates %>% mutate(month = format(date, "%m"))
grouped.dates$date <- as.Date(grouped.dates$date, '%B %d, %Y') # ignore year
grouped.dates
grouped.dates$date <- as.Date(grouped.dates$date, '%B %d, %y') # ignore year
grouped.dates
grouped.dates$date <- as.Date(grouped.dates$date, '%B %d') # ignore year
grouped.dates
grouped.dates$date <- as.Date(grouped.dates$date, '%B %d, %Y') # ignore year
grouped.dates <- grouped.dates %>% mutate(month = format(date, "%m"))
sum.groups <- aggregate(grouped.dates[,'total'], by=list(grouped.dates$month), "sum")
sum.groups
dates.casualties <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'marker',
marker = list(size = 10, color = ~total)) %>%
layout(margin = list(b = 160, r = 50), xaxis = list(title = 'Dates', tickangle = 45),
yaxis = list(title = 'Total Casualties'))
dates.casualties
dates.casualties <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'marker',
marker = list(size = 10, color = ~total)) %>%
layout(xaxis = list(title = 'Dates', tickangle = 45),
yaxis = list(title = 'Total Casualties'))
dates.casualties
grouped.dates <- grouped.dates %>% mutate(month = format(date, "%B"))
grouped.dates
sum.groups <- aggregate(grouped.dates[,'total'], by=list(grouped.dates$month), "sum")
sum.groups
dates.casualties <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'marker',
marker = list(size = 10, color = ~total)) %>%
layout(xaxis = list(title = 'Dates', tickangle = 45),
yaxis = list(title = 'Total Casualties'))
dates.casualties
grouped.dates <- grouped.dates %>% mutate(month = format(date, "%m"))
sum.groups <- aggregate(grouped.dates[,'total'], by=list(grouped.dates$month), "sum")
dates.casualties <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'marker',
marker = list(size = 10, color = ~total)) %>%
layout(xaxis = list(title = 'Dates', tickangle = 45),
yaxis = list(title = 'Total Casualties'))
dates.casualties
dates.casualties <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'marker',
marker = list(size = 10, color = ~total)) %>%
layout(xaxis = list(title = 'Months', tickangle = 45),
yaxis = list(title = 'Total Casualties'))
grouped.dates <- shooting.data %>% mutate(total = (injured + killed))
grouped.dates$date <- as.Date(grouped.dates$date, '%B %d, %Y') # ignore year
grouped.dates <- grouped.dates %>% mutate(month = format(date, "%m"))
sum.groups <- aggregate(grouped.dates[,'total'], by=list(grouped.dates$month), "sum")
dates.casualties <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'marker',
marker = list(size = 10, color = ~total)) %>%
layout(xaxis = list(title = 'Months', tickangle = 45),
yaxis = list(title = 'Total Casualties'))
dates.casualties <- plot_ly(data = sum.groups, x = ~Group.1, y = ~total, type = 'scatter', mode = 'marker',
marker = list(size = 10, color = sum.groups$total)) %>%
layout(xaxis = list(title = 'Months', tickangle = 45),
yaxis = list(title = 'Total Casualties'))
dates.casualties <- plot_ly(data = sum.groups, x = ~Group.1, y = sum.groups$total, type = 'scatter', mode = 'marker',
marker = list(size = 10, color = sum.groups$total)) %>%
layout(xaxis = list(title = 'Months', tickangle = 45),
yaxis = list(title = 'Total Casualties'))
sum.groups
dates.casualties <- plot_ly(data = sum.groups, x = ~Group.1, y = ~x, type = 'scatter', mode = 'marker',
marker = list(size = 10, color = ~x)) %>%
layout(xaxis = list(title = 'Months', tickangle = 45),
yaxis = list(title = 'Total Casualties'))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(knitr)
library(ggplot2)
library(plotly)
shooting.data <- read.csv('./data/shootings-2016.csv')
top.10.casualties <- aggregate(sum.of.casualties[,'total'], by=list(sum.of.casualties[['state']]), "sum") %>%
arrange(-x) %>%
top_n(10) %>%
kable(col.names = c('State', 'Total Casualties'), align='l')
sum.of.casualties <- shooting.data %>%
mutate(total = (injured + killed))
top.10.casualties <- aggregate(sum.of.casualties[,'total'], by=list(sum.of.casualties[['state']]), "sum") %>%
arrange(-x) %>%
top_n(10) %>%
kable(col.names = c('State', 'Total Casualties'), align='l')
shooting.occurred <- nrow(shooting.data)
lives.lost <- sum(shooting.data$killed)
# affected will be defined as the most injured and killed combined.
most.affected <- shooting.data %>%
mutate(total = (injured + killed)) %>%
arrange(-total) %>%
top_n(3)
most.shooting <- table(shooting.data[['state']]) %>%
as.data.frame() %>%
arrange(-Freq) %>%
top_n(1)
grouped.dates <- shooting.data %>%
mutate(total = (injured + killed))
grouped.dates$date <- as.Date(grouped.dates[['date']], '%B %d, %Y') # ignore year
grouped.dates <- grouped.dates %>%
mutate(month = format(date, "%m"))
sum.groups <- aggregate(grouped.dates[,'total'], by=list(grouped.dates[['month']]), "sum") # sum of casualties per month
dates.casualties <- plot_ly(data = sum.groups, x = ~Group.1, y = ~x, type = 'scatter', mode = 'marker',
marker = list(size = 10, color = ~x)) %>%
layout(xaxis = list(title = 'Months', tickangle = 45),
yaxis = list(title = 'Total Casualties'))
## Chart One ##
``` {r Chart One, echo = FALSE, message = FALSE}
source("./scripts/chart1.R")
ChartOne(data = data)
```
data <- read.csv('./data/intro-survey.csv')
source("./scripts/chart1.R")
ChartOne(data = data)
source("./scripts/Chart_2.R")
Chart_2(data)
Chart_2(data)
source("./scripts/Chart3.R")
Chart3(data)
colnames(data)
data$How.many.siblings.do.you.have.
View(data)
data <- select(data, countries = contains("countries"), siblings = contains("siblings"), standing = contains("standing")) %>%
filter(is.na(siblings) == FALSE) %>%
group_by(siblings)
data <- select(data, countries = contains("countries"), siblings = contains("siblings"), standing = contains("standing")) %>%
filter(is.na(How.many.siblings.do.you.have.) == FALSE) %>%
group_by(siblings)
data <- read.csv('./data/intro-survey.csv', na.rm == TRUE)
data <- read.csv('./data/intro-survey.csv', na.rm = TRUE)
data <- read.csv('./data/intro-survey.csv', NA.rm = TRUE)
test.omit <- na.omit(data)
test.omit
View(test.omit)
Chart3(data)
source("./scripts/Chart3.R")
Chart3(data)
source("./scripts/Chart3.R")
Chart3(data)
source("./scripts/Chart3.R")
Chart3(data)
source("./scripts/Chart3.R")
Chart3(data)
source("./scripts/Chart3.R")
Chart3(data)
graph <- ggplot(data = value.set, aes(x = countries, y = siblings)) +
geom_violin(scale = "area", trim = FALSE, fill = "deepskyblue", color = "darkblue") +
labs(title = "Plot of countries travelled by the number of siblings", x = "No. of Countries", y = "No. of Siblings") +
theme_classic()
source("./scripts/Chart3.R")
Chart3(data)
source("./scripts/Chart3.R")
Chart3(data)
shiny::runApp('C:/Users/nguye/Desktop/201/a8-building-apps-cnguyen0')
runApp('C:/Users/nguye/Desktop/201/a8-building-apps-cnguyen0')
View(cereal.df)
runApp('C:/Users/nguye/Desktop/201/a8-building-apps-cnguyen0')
library(dplyr)
library(stringr)
library(ggplot2)
install.packages('janeaustenr')
install.packages('tidytext')
library(janeaustenr)
library(tidytext)
booksinto.df <- booksinto
booksinto.df <- austen_books(booksinto)
booksinto.df <- austen_books()
booksinto.df
View(booksinto.df)
unique(booksinto.df[,'book'])
length(unique(booksinto.df[,'book']))
nrow(unique(booksinto.df[,'book']))
num.of.books <- nrow(unique(booksinto.df[,'book']))
shiny::runApp('C:/Users/nguye/Desktop/201/info201-final-project')
