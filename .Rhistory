committees.with.names <- full_join(committees.served.reps, repIDs, by = "results.bioguide_id")
committees.served.reps <- rbind.fill(lapply(repIDs$results.bioguide_id, CommitteesServed), as.character)
committees.with.names <- full_join(committees.served.reps, repIDs, by = "results.bioguide_id")
repIDs <- select(as.data.frame(body.legis.data, stringsAsFactors = FALSE), results.bioguide_id, results.first_name, results.last_name)
committees.served.reps <- rbind.fill(lapply(repIDs$results.bioguide_id, CommitteesServed), stringsAsFactors = FALSE)
committees.with.names <- full_join(committees.served.reps, repIDs, by = "results.bioguide_id")
committees.with.names <- full_join(committees.served.reps, repIDs, by = "results.bioguide_id")
barplot(height = count.of.committees$n, names.arg = names, horiz = TRUE, xlab = "# Committees")
barplot(height = count.of.committees$n, names.arg = names, horiz = TRUE, xlab = "# Committees")
{r summary committee info, echo = FALSE, message = FALSE, warnings = FALSE}
committees.with.names <- left_join(committees.served.reps, repIDs, by = "results.bioguide_id")
View(committees.with.names)
committees.with.names <- join(committees.served.reps, repIDs, by = "results.bioguide_id")
View(committees.with.names)
committees.with.names <- join(committees.served.reps, repIDs, by = "results.bioguide_id")
View(committees.with.names)
committees.served.reps <- rbind.fill(lapply(repIDs$results.bioguide_id, CommitteesServed))
committees.with.names <- join(committees.served.reps, repIDs, by = "results.bioguide_id")
repIDs <- select(as.data.frame(body.legis.data), results.bioguide_id, results.first_name, results.last_name)
committees.with.names <- join(committees.served.reps, repIDs, by = "results.bioguide_id")
barplot(height = count.of.committees$n, names.arg = names, horiz = TRUE, xlab = "# Committees", main = "Committees Served on by Each Rep.")
barplot(height = count.of.committees$n, names.arg = names, horiz = TRUE, xlab = "# Committees", main = "Committees Served on by Each Rep.")
par(mar= c(5,7,4,2))
par(las =2)
barplot(height = count.of.committees$n, names.arg = names, horiz = TRUE, xlab = "# Committees", main = "Committees Served on by Each Rep.")
View(results)
response.commit.all <- GET(full.uei.commit, query= "per_page=all")
response.commit.all <- GET(full.uri.commit, query= "per_page=all")
body.commit.all <- fromJSON(content(response.commit.all, "text"))
body.commit.all <- as.data.frame(fromJSON(content(response.commit.all, "text")))
body.commit.all
rand.committee <- body.commit.all$results$committee_id[1,]
rand.committee <- body.commit.all$results$committee_id[10]
is.subcommittee <- body.commit.all$results$subcommittee[10] == FALSE
is.subcommittee
is.subcommittee <- body.commit.all$results$subcommittee[10] == TRUE
is.subcommittee
is.subcommittee <- body.commit.all$results$subcommittee[5] == TRUE
is.subcommittee
body.commit.all$results$subcommittee
rand.committee <- body.commit.all$results$committee_id[21]
is.subcommittee <- body.commit.all$results$subcommittee[21] == TRUE
is.subcommittee
ChooseRandCommit <- function() {
rand <- runif(1, 1, 230)
rand.committee <- body.commit.all$results$committee_id[rand]
if(body.commit.all$results$subcommittee[rand] == TRUE) {
ChooseRandCommit()
} else {
return(rand.committee)
}
}
ChooseRandCommit()
ChooseRandCommit()
df <- body.commit.all$results
View(df)
response.commit.all <- GET(full.uri.commit, query= "fields=member_ids,name,committee_id&per_page=all")
body.commit.all <- fromJSON(content(response.commit.all, "text"))
df <- body.commit.all$results
ChooseRandCommitID <- function() {
rand <- runif(1, 1, 230)
rand.committee <- body.commit.all$results$committee_id[rand]
if(body.commit.all$results$subcommittee[rand] == TRUE) {
ChooseRandCommit()
} else {
return(rand.committee)
}
}
ChooseRandCommit()
response.commit.all <- GET(full.uri.commit, query=                                                                                                           "fields=member_ids,name,committee_id,subcommittee&per_page=all")
body.commit.all <- fromJSON(content(response.commit.all, "text"))
df <- body.commit.all$results
ChooseRandCommitID <- function() {
rand <- runif(1, 1, 230)
rand.committee <- body.commit.all$results$committee_id[rand]
if(body.commit.all$results$subcommittee[rand] == TRUE) {
ChooseRandCommit()
} else {
return(rand.committee)
}
}
ChooseRandCommitID()
body.commit.results <- body.commit.all$results
ChooseRandCommitID <- function() {
rand <- runif(1, 1, 230)
rand.committee <- body.commit.results$committee_id[rand]
if(body.commit.results$subcommittee[rand] == TRUE) {
ChooseRandCommit()
} else {
return(rand.committee)
}
}
ChooseRandCommitID()
rand.commit <- ChooseRandCommitID()
ChooseRandCommitID <- function() {
rand <- runif(1, 1, 230)
rand.committee <- body.commit.results$committee_id[rand]
if(body.commit.results$subcommittee[rand] == TRUE) {
ChooseRandCommitID()
} else {
return(rand.committee)
}
}
rand.commit <- ChooseRandCommitID() #Stores a random committee ID in a variable.
query.params.commit <- paste0("committee_id=", rand.commit, "&fields=members,name&per_page=all")
response.commit <- GET(full.uri.commit, query = query.params.commit)
body.commit.ID <- fromJSON(content(response.commit.ID, "text"))
body.commit.ID <- fromJSON(content(response.commit.ID, "text"))
query.params.commit.ID <- paste0("committee_id=", rand.commit, "&fields=members,name&per_page=all")
response.commit.ID <- GET(full.uri.commit, query = query.params.commit)
body.commit.ID <- fromJSON(content(response.commit.ID, "text"))
body.commit.ID.results <- body.commit.ID$results
View(body.commit.ID.results)
body.commit.ID.members <- body.commit.ID$results$members
body.commit.ID <- fromJSON(content(res,"text"))$results$members[[1]] %>% flatten()
body.commit.ID <- fromJSON(content(response.commit.ID,"text"))$results$members[[1]] %>%
flatten()
View(body.commit.ID)
View(body.commit.ID)
committee.chair <- select(body.commit.ID, contains("Chair"))
View(committee.chair)
committee.chair <- filter(body.commit.ID, contains("Chair"))
committee.chair <- filter(body.commit.ID, grepl("Chair", title))
View(committee.chair)
committee.chair <- filter(body.commit.ID, grepl("Chair", title)) %>%
c(legislator.first_name, legislator.last_name)
committee.chair.name <- c(committee.chair$legislator.first_name, committee.chair$legislator.last_name)
committee.chair.name <- paste(committee.chair$legislator.first_name, committee.chair$legislator.last_name)
num.of.members <- count(body.commit.ID)
num.of.members <- as.numeric(count(body.commit.ID))
View(committees.with.names)
response.commit <- GET(full.uri.commit, query = "fields=member_ids,name,committee_id,subcommittee&per_page=all")
body.commit <- content(response.commit, "text")
commit.data <- fromJSON(body.commit)
results <- commit.data$results
View(results)
CommitteesServed <- function(memID) {
committees.served <- filter(results, grepl(memID, member_ids)) %>%
select(name)
results.bioguide_id <- c(memID)
data.framenew <- data.frame(committees.served, results.bioguide_id)
return(data.framenew)
}
repIDs <- select(as.data.frame(body.legis.data), results.bioguide_id, results.first_name, results.last_name)
committees.served.reps <- rbind.fill(lapply(repIDs$results.bioguide_id, CommitteesServed))
committees.with.names <- join(committees.served.reps, repIDs, by = "results.bioguide_id")
count.of.committees <- group_by(committees.with.names, results.bioguide_id, results.first_name,                                                 results.last_name) %>%
count() %>%
arrange(n)
View(Committees.with.names)
View(committees.with.names)
View(results)
CommitteesServed <- function(memID) {
committees.served <- filter(results, grepl(memID, member_ids)) # %>%
#select(name)
results.bioguide_id <- c(memID)
data.framenew <- data.frame(committees.served, results.bioguide_id)
return(data.framenew)
}
repIDs <- select(as.data.frame(body.legis.data), results.bioguide_id, results.first_name, results.last_name)
committees.served.reps <- rbind.fill(lapply(repIDs$results.bioguide_id, CommitteesServed))
committees.with.names <- join(committees.served.reps, repIDs, by = "results.bioguide_id")
count.of.committees <- group_by(committees.with.names, results.bioguide_id, results.first_name,                                                 results.last_name) %>%
count() %>%
arrange(n)
View(committees.with.names)
names <- c(paste(count.of.committees$results.first_name, count.of.committees$results.last_name))
par(mar= c(5,7,4,2))
par(las =2)
barplot(height = count.of.committees$n, names.arg = names, horiz = TRUE, xlab = "# Committees", main = "Committees Served on by Each Rep.")
ad
par(mar= c(5,7,4,2))
barplot(height = count.of.committees$n, names.arg = names, las = 1, horiz = TRUE, xlab = "# Committees", main = "Committees Served on by Each Rep.")
View(committees.with.names)
View(committees.served.reps)
View(committees.with.names)
ChooseRandCommitID <- function() {
rand <- runif(1, 1, 230)
rand.committee <- committees.with.names$committee_id[rand]
if(committees.with.names$committee_ide[rand] == TRUE) {
ChooseRandCommitID()
} else {
return(rand.committee)
}
}
ChooseRandCommit()
ChooseRandCommitID <- function() {
rand <- runif(1, 1, 33)
rand.committee <- committees.with.names$committee_id[rand]
if(committees.with.names$committee_ide[rand] == TRUE) {
ChooseRandCommitID()
} else {
return(rand.committee)
}
}
rand.commit <- ChooseRandCommitID() #Stores a random committee ID in a variable.
ChooseRandCommitID <- function() {
rand <- runif(1, 1, 33)
rand.committee <- committees.with.names$committee_id[rand]
if(committees.with.names$committee_id[rand] == TRUE) {
ChooseRandCommitID()
} else {
return(rand.committee)
}
}
rand.commit <- ChooseRandCommitID() #Stores a random committee ID in a variable.
ChooseRandCommitID()
ChooseRandCommitID <- function() {
rand <- runif(1, 1, 33)
rand.committee <- committees.with.names$committee_id[rand]
if(committees.with.names$committee_id[rand] == TRUE) {
ChooseRandCommitID()
} else {
return(select(committees.with.names, committee_id == rand.committee)
}
ChooseRandCommitID <- function() {
rand <- runif(1, 1, 33)
rand.committee <- committees.with.names$committee_id[rand]
if(committees.with.names$committee_id[rand] == TRUE) {
ChooseRandCommitID()
} else {
return(select(committees.with.names, committee_id == rand.committee))
}
}
ChooseRandCommitID()
ChooseRandCommitID <- function() {
rand <- runif(1, 1, 33)
rand.committee <- committees.with.names$committee_id[rand]
if(committees.with.names$committee_id[rand] == TRUE) {
ChooseRandCommitID()
} else {
return(filter(committees.with.names, committee_id == rand.committee))
}
}
rand.commit <- ChooseRandCommitID() #Stores a random committee ID in a variable.
ChooseRandCommitID()
View(rand.commit)
query.params.commit.ID <- paste0("committee_id=", rand.commit, "&fields=members,name&per_page=all")
response.commit.ID <- GET(full.uri.commit, query = query.params.commit)
body.commit.ID <- fromJSON(content(response.commit.ID,"text"))$results$members[[1]] %>%
flatten()
committee.chair <- filter(body.commit.ID, grepl("Chair", title))
committee.chair.name <- paste(committee.chair$legislator.first_name, committee.chair$legislator.last_name)
query.params.commit.ID <- paste0("committee_id=", rand.commit$committee_id, "&fields=members,name&per_page=all")
response.commit.ID <- GET(full.uri.commit, query = query.params.commit)
body.commit.ID <- fromJSON(content(response.commit.ID,"text"))$results$members[[1]] %>%
flatten()
committee.chair <- filter(body.commit.ID, grepl("Chair", title))
committee.chair.name <- paste(committee.chair$legislator.first_name, committee.chair$legislator.last_name)
response.commit.ID <- GET(full.uri.commit, query = query.params.commit)
body.commit.ID <- fromJSON(content(response.commit.ID,"text"))$results$members[[1]] %>%
flatten()
ChooseRandCommitID <- function() {
rand <- runif(1, 1, 33)
rand.committee <- committees.with.names$committee_id[rand]
if(committees.with.names$committee_id[rand]$subcommittee == TRUE) {
ChooseRandCommitID()
} else {
return(filter(committees.with.names, committee_id == rand.committee))
}
}
rand.commit <- ChooseRandCommitID() #Stores a random committee ID in a variable.
rand.committee <- committees.with.names$committee_id[10]
ChooseRandCommitID <- function() {
rand <- runif(1, 1, 33)
rand.committee <- committees.with.names$committee_id[rand]
if(committees.with.names$subcommittee[rand] == TRUE) {
ChooseRandCommitID()
} else {
return(filter(committees.with.names, committee_id == rand.committee))
}
}
rand.commit <- ChooseRandCommitID() #Stores a random committee ID in a variable.
View(committees.with.names)
query.params.commit.ID <- paste0("committee_id=", rand.commit$committee_id, "&fields=members,name&per_page=all")
rand.commit <- ChooseRandCommitID() #Stores a random committee ID in a variable.
query.params.commit.ID <- paste0("committee_id=", rand.commit$committee_id, "&fields=members,name&per_page=all")
response.commit.ID <- GET(full.uri.commit, query = query.params.commit)
body.commit.ID <- fromJSON(content(response.commit.ID,"text"))$results$members[[1]] %>%
flatten()
View(body.commit.ID)
body.commit.ID <- fromJSON(content(response.commit.ID,"text"))$results
View(body.commit.ID)
response.commit.ID
response.commit.ID <- GET(full.uri.commit, query = query.params.commit)
response.commit.ID <- GET(full.uri.commit, query = query.params.commit)
response.commit.ID
query.params.commit.ID <- paste0("committee_id=", rand.commit$committee_id, "&fields=members,name&per_page=all")
response.commit.ID <- GET(full.uri.commit, query = query.params.commit.ID)
body.commit.ID <- fromJSON(content(response.commit.ID,"text"))$results$members[[1]] %>%
flatten()
committee.chair <- filter(body.commit.ID, grepl("Chair", title))
committee.chair.name <- paste(committee.chair$legislator.first_name, committee.chair$legislator.last_name)
num.of.members <- as.numeric(count(body.commit.ID))
rep.rand.commit <- paste(rand.commit$results.first_name, rand.commit$results.last_name)
side.of.rep <- filter(body.commit.ID, grepl(rand.commit$results.first_name, legislator.first_name)) %>%
filter(grepl(rand.commit$results.last_name, legislator.last_name) %>%
$side
side.of.rep <- filter(body.commit.ID, grepl(rand.commit$results.first_name, legislator.first_name)) %>%
filter(grepl(rand.commit$results.last_name, legislator.last_name) %>%
side.of.rep$side
side.of.rep <- filter(body.commit.ID, grepl(rand.commit$results.first_name, legislator.first_name)) %>%
side.of.rep <- filter(body.commit.ID, grepl(rand.commit$results.first_name, legislator.first_name)) %>%
filter(grepl(rand.commit$results.last_name, legislator.last_name)) %>%
select(side)
side.of.rep <- filter(body.commit.ID, grepl(rand.commit$results.first_name, legislator.first_name)) %>%
filter(grepl(rand.commit$results.last_name, legislator.last_name)) %>%
as.character(select(side))
side.of.rep <- filter(body.commit.ID, grepl(rand.commit$results.first_name, legislator.first_name)) %>%
filter(grepl(rand.commit$results.last_name, legislator.last_name)) %>%
select(side) %>%
as.character()
View(rand.commit)
rand.commit <- filter(committees.with.names, committee_id == "SSFI")
rep.rand.commit <- paste(rand.commit$results.first_name, rand.commit$results.last_name)
query.params.commit.ID <- paste0("committee_id=", rand.commit$committee_id, "&fields=members,name&per_page=all")
response.commit.ID <- GET(full.uri.commit, query = query.params.commit.ID)
body.commit.ID <- fromJSON(content(response.commit.ID,"text"))$results$members[[1]] %>%
flatten()
committee.chair <- filter(body.commit.ID, grepl("Chair", title))
committee.chair.name <- paste(committee.chair$legislator.first_name, committee.chair$legislator.last_name)
num.of.members <- as.numeric(count(body.commit.ID))
side.of.rep <- filter(body.commit.ID, grepl(rand.commit$results.first_name, legislator.first_name)) %>%
filter(grepl(rand.commit$results.last_name, legislator.last_name)) %>%
select(side) %>%
as.character()
committee.info <- "The Senate Committee on Finance concerns itself primarily with taxes and other revenue measures. They are currently reviewing S.439: A bill to amend part B of title IV of the Social Security Act to ensure that mental health screenings and assessments are provided to children and youth upon entry into foster care."
f.on.committee <- as.numeric(count(legislator.gender == "F"))
f.on.committee <- as.numeric(count(body.commit.ID$legislator.gender == "F"))
f.on.committee <- as.numeric(count(group(body.commit.ID$legislator.gender == "F")))
f.on.committee <- as.numeric(count(group_by(body.commit.ID, legislator.gender == "F")))
f.on.committee <- group_by(body.commit.ID, legislator.gender == "F")
View(f.on.committee)
View(f.on.committee)
View(f.on.committee)
f.on.committee <- count(group_by(body.commit.ID, legislator.gender == "F"))
f.on.committee <- as.numberic(count(group_by(body.commit.ID, legislator.gender == "F")))
f.on.committee <- as.numeric(count(group_by(body.commit.ID, legislator.gender == "F")))
f.on.committee <- count(group_by(body.commit.ID, legislator.gender == "F"))
View(f.on.committee)
View(f.on.committee)
f.on.committee <- filter(body.commit.ID, legislator.gender == "F") %>%
count() %>%
as.numeric()
m.on.committee <- filter(body.commit.ID, legislator.gender == "M") %>%
count() %>%
as.numeric()
f.percent <- paste0(round((f.on.committee / num.of.members) * 100), "%")
m.percent <- paste0(round((m.on.committee / num.of.members) * 100), "%")
ChooseRandCommitID <- function() {
rand <- runif(1, 1, 33)
rand.committee <- committees.with.names$committee_id[rand]
if(committees.with.names$subcommittee[rand] == TRUE) {
ChooseRandCommitID()
} else {
return(filter(committees.with.names, committee_id == rand.committee))
}
}
"The zipcode `r "98105"` is in district `r district`."
data < womensrole
shiny::runApp('C:/Users/Stephanie/Desktop/INFO201Assignments/info201-final-project')
data <- read.csv(file = "./data/mental-health-in-tech-2016.csv")
setwd("C:/Users/Stephanie/Desktop/INFO201Assignments/info201-final-project")
data <- read.csv(file = "./data/mental-health-in-tech-2016.csv")
data <- read.csv(file = "./Data/mental-health-in-tech-2016.csv")
setwd("C:/Users/Stephanie/Desktop/INFO201Assignments/info201-final-project")
data <- read.csv(file = "./Data/mental-health-in-tech-2016.csv")
data <- read.csv("./Data/mental-health-in-tech-2016.csv")
data <- read.csv("./Data/mental-health-in-tech-2016.csv")
data <- read.csv("./Data/mental-health-in-tech-2016.csv")
setwd("C:/Users/Stephanie/Desktop/INFO201Assignments/info201-final-project")
data <- read.csv("./Data/mental-health-in-tech-2016.csv")
data <- read.csv("./Data/mental-health-in-tech-2016")
data <- read.csv("./Data/mental-health-in-tech-2016.csv")
data <- read.csv('./Data/mental-health-in-tech-2016.csv')
data <- read.csv('./Data/mental-heath-in-tech-2016.csv')
View(data)
data <- read.csv('./Data/mental-heath-in-tech-2016.csv', na.rm = TRUE)
data <- read.csv('./Data/mental-heath-in-tech-2016.csv', na.omit = TRUE)
data <- read.csv('./Data/mental-heath-in-tech-2016.csv') %>%
na.rm()
data <- read.csv('./Data/mental-heath-in-tech-2016.csv') %>%
na.omit()
data <- read.csv('./Data/mental-heath-in-tech-2016.csv') %>%
na.omit()
View(data)
data <- read.csv('./Data/mental-heath-in-tech-2016.csv')
data <- read.csv('./Data/mental-heath-in-tech-2016.csv') %>%
max(na.rm = TRUE)
data <- read.csv('./Data/mental-heath-in-tech-2016.csv', stringsAsFactors = TRUE) %>%
max(na.rm = TRUE)
data <- read.csv('./Data/mental-heath-in-tech-2016.csv', stringsAsFactors = TRUE)
View(data)
data <- read.csv('./Data/mental-heath-in-tech-2016.csv', stringsAsFactors = FALSE)
View(data)
data <- read.csv('./Data/mental-heath-in-tech-2016.csv') %>%
apply(2, na.rm = TRUE)
data <- read.csv('./Data/mental-heath-in-tech-2016.csv') %>%
apply(2, max, na.rm = TRUE)
data <- read.csv('./Data/mental-heath-in-tech-2016.csv') %>%
apply(2, max, na.rm = TRUE) >%
as.data.frame()
data <- read.csv('./Data/mental-heath-in-tech-2016.csv') %>%
apply(2, max, na.rm = TRUE) %>%
as.data.frame()
View(data)
data <- read.csv('./Data/mental-heath-in-tech-2016.csv')
View(data)
data <- read.csv('./Data/mental-heath-in-tech-2016.csv') %>%
complete.cases()
data <- read.csv('./Data/mental-heath-in-tech-2016.csv') %>%
complete.cases() %>%
as.data.frame()
data <- read.csv('./Data/mental-heath-in-tech-2016.csv')
x <- data[complete.cases(data), ]
View(x)
str(x)
library("dplyr", lib.loc="~/R/win-library/3.3")
library(jsonlite)
flatten(x)
x1 <- flatten(x)
View(x1)
data <- read.csv('./Data/mental-heath-in-tech-2016.csv')
comfort.level <- data[,11:12]
View(comfort.level)
comfort.level <- data[,11:12] %>%
na.omit()
View(comfort.level)
select(comfort.level, !contains(""))
data <- read.csv('./Data/mental-heath-in-tech-2016.csv', na.strings = c(" ", NA))
View(data)
data[1,4]
comfort.level <- data[,11:12] %>%
col.names(c("Mental", "Physical"))
comfort.level <- data[,11:12] %>%
colnames(c("Mental", "Physical"))
comfort.level <- colnames(c("Mental", "Physical"))
colnames(comfort.level) <- c("Mental", "Physical")
comfort.level <- data[,11:12]
colnames(comfort.level) <- c("Mental", "Physical")
ggplot(data = comfort.level) +
geom_point(mapping = aes(x=Mental, y = Physical))
comfort.level <- comfort.level[!is.na(comfort.level),]
View(comfort.level)
comfort.level <- comfort.level[!is.na(comfort.level$Mental),]
View(comfort.level)
comfort.level <- data[,11:12]
colnames(comfort.level) <- c("Mental", "Physical")
comfort.level <- comfort.level[!is.na(comfort.level$Mental) & !is.na(comfort.level$Physical),]
View(comfort.level)
select(comfort.level, is.na())
select(comfort.level, !is.na())
select(comfort.level, !is.na(comfort.level))
comfort.level <- data[,11:12] %>%
na.omit()
comfort.level <- data[,11:12] %>%
na.exclude()
colnames(comfort.level) <- c("Mental", "Physical")
comfort.level <-  comfort.level[!(is.na(comfort.level$Mental) | comfort.level$Physical==""), ]
View(comfort.level)
ggplot(data = comfort.level) +
geom_point(mapping = aes(x=Mental, y = Physical))
yes < select(comfort.level, contains("Yes")) %>%
count() %>%
as.numeric()
yes <- select(comfort.level, contains("Yes")) %>%
count() %>%
as.numeric()
yes <- select(comfort.level, contains("Yes")) #%>%
View(yes)
yes.mental < filter(comfort.level, grepl(Yes, Mental)) %>%
count() %>%
as.numerc()
yes.mental <- filter(comfort.level, grepl(Yes, Mental)) %>%
count() %>%
as.numerc()
filtered <- filter(data, grepl(Class, ï..What.is.your.current.class.standing.)) %>%
as.data.frame()
yes.mental <- filter(comfort.level, grepl(Yes, Mental)) %>%
count() %>%
as.numeric()
library("dplyr", lib.loc="~/R/win-library/3.3")
yes.mental <- filter(comfort.level, grepl(Yes, Mental)) %>%
count() %>%
as.numeric()
yes.mental <- filter(comfort.level, grepl("Yes", Mental)) %>%
count() %>%
as.numeric()
maybe.mental <- filter(comfort.level, grepl("Maybe", Mental)) %>%
count() %>%
as.numeric()
no.mental <- filter(comfort.level, grepl("No", Mental)) %>%
count() %>%
as.numeric()
yes.physical <- filter(comfort.level, grepl("Yes", Physical)) %>%
count() %>%
as.numeric()
physical <- c(yes.physical, maybe.physical, no.physical)
yes.physical <- filter(comfort.level, grepl("Yes", Physical)) %>%
count() %>%
as.numeric()
maybe.physical <- filter(comfort.level, grepl("Maybe", Physical)) %>%
count() %>%
as.numeric()
no.physical <- filter(comfort.level, grepl("No", Physical)) %>%
count() %>%
as.numeric()
physical <- c(yes.physical, maybe.physical, no.physical)
comfort.level.num <- data.frame(mental, physical)
mental <- c(yes.mental, maybe.mental, no.mental)
comfort.level.num <- data.frame(mental, physical)
View(comfort.level.num)
